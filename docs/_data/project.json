{
  "Module": {
    "angle": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/angle.ts",
          "line": 1,
          "character": 23
        }
      ],
      "Function": {
        "mirror": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "mirror",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Mirror an angle on either or both x and y axes.",
                "returns": "Mirrored angle.\n"
              },
              "parameters": [
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "The angle to mirror.",
                  "type": "number"
                },
                {
                  "name": "mirrorX",
                  "flags": {},
                  "comment": "Boolean to mirror on the x axis.",
                  "type": "boolean"
                },
                {
                  "name": "mirrorY",
                  "flags": {},
                  "comment": "Boolean to mirror on the y axis.",
                  "type": "boolean"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 151,
              "character": 26
            }
          ]
        },
        "noRevolutions": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "noRevolutions",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Ensures an angle is not greater than 360",
                "returns": "Same polar angle but not greater than 360 degrees.\n"
              },
              "parameters": [
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "Angle in degrees.",
                  "type": "number"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 37,
              "character": 33
            }
          ]
        },
        "ofArcEnd": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "ofArcEnd",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get an arc's end angle, ensured to be greater than its start angle.",
                "returns": "End angle of arc.\n"
              },
              "parameters": [
                {
                  "name": "arc",
                  "flags": {},
                  "comment": "An arc path object.",
                  "type": "IPathArc"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 70,
              "character": 28
            }
          ]
        },
        "ofArcMiddle": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "ofArcMiddle",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get the angle in the middle of an arc's start and end angles.",
                "returns": "Middle angle of arc.\n"
              },
              "parameters": [
                {
                  "name": "arc",
                  "flags": {},
                  "comment": "An arc path object.",
                  "type": "IPathArc"
                },
                {
                  "name": "ratio",
                  "flags": {},
                  "comment": "Optional number between 0 and 1 specifying percentage between start and end angles. Default is .5",
                  "type": "number",
                  "defaultValue": "0.5"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 88,
              "character": 31
            }
          ]
        },
        "ofArcSpan": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "ofArcSpan",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Total angle of an arc between its start and end angles.",
                "returns": "Angle of arc.\n"
              },
              "parameters": [
                {
                  "name": "arc",
                  "flags": {},
                  "comment": "The arc to measure.",
                  "type": "IPathArc"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 98,
              "character": 29
            }
          ]
        },
        "ofChainLinkJoint": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "ofChainLinkJoint",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get the angle of a joint between 2 chain links.",
                "returns": "Angle between chain links.\n"
              },
              "parameters": [
                {
                  "name": "linkA",
                  "flags": {},
                  "comment": "First chain link.",
                  "type": "IChainLink"
                },
                {
                  "name": "linkB",
                  "flags": {},
                  "comment": "Second chain link.",
                  "type": "IChainLink"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 201,
              "character": 36
            }
          ]
        },
        "ofLineInDegrees": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "ofLineInDegrees",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Angle of a line path.",
                "returns": "Angle of the line path, in degrees.\n"
              },
              "parameters": [
                {
                  "name": "line",
                  "flags": {},
                  "comment": "The line path to find the angle of.",
                  "type": "IPathLine"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 114,
              "character": 35
            }
          ]
        },
        "ofPointInDegrees": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "ofPointInDegrees",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Angle of a line through a point, in degrees.",
                "returns": "Angle of the line throught the point, in degrees.\n"
              },
              "parameters": [
                {
                  "name": "origin",
                  "flags": {},
                  "comment": "Point of origin of the angle.",
                  "type": "IPoint"
                },
                {
                  "name": "pointToFindAngle",
                  "flags": {},
                  "comment": "The point to find the angle.",
                  "type": "IPoint"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 125,
              "character": 36
            }
          ]
        },
        "ofPointInRadians": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "ofPointInRadians",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Angle of a line through a point, in radians.",
                "returns": "Angle of the line throught the point, in radians.\n"
              },
              "parameters": [
                {
                  "name": "origin",
                  "flags": {},
                  "comment": "Point of origin of the angle.",
                  "type": "IPoint"
                },
                {
                  "name": "pointToFindAngle",
                  "flags": {},
                  "comment": "The point to find the angle.",
                  "type": "IPoint"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 136,
              "character": 36
            }
          ]
        },
        "toDegrees": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toDegrees",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Convert an angle from radians to degrees.",
                "returns": "Angle in degrees.\n"
              },
              "parameters": [
                {
                  "name": "angleInRadians",
                  "flags": {},
                  "comment": "Angle in radians.",
                  "type": "number"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 60,
              "character": 29
            }
          ]
        },
        "toRadians": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toRadians",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Convert an angle from degrees to radians.",
                "returns": "Angle in radians.\n"
              },
              "parameters": [
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "Angle in degrees.",
                  "type": "number"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/angle.ts",
              "line": 50,
              "character": 29
            }
          ]
        }
      }
    },
    "path": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/path.ts",
          "line": 1,
          "character": 22
        }
      ],
      "Function": {
        "breakAtPoint": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "breakAtPoint",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Breaks a path in two. The supplied path will end at the supplied pointOfBreak,\na new path is returned which begins at the pointOfBreak and ends at the supplied path's initial end point.\nFor Circle, the original path will be converted in place to an Arc, and null is returned.",
                "returns": "A new path of the same type, when path type is line or arc. Returns null for circle.\n"
              },
              "parameters": [
                {
                  "name": "pathToBreak",
                  "flags": {},
                  "comment": "The path to break.",
                  "type": "IPath"
                },
                {
                  "name": "pointOfBreak",
                  "flags": {},
                  "comment": "The point at which to break the path.",
                  "type": "IPoint"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/break.ts",
              "line": 96,
              "character": 32
            }
          ]
        },
        "expand": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "expand",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Expand path by creating a model which surrounds it.",
                "returns": "Model which surrounds the path.\n"
              },
              "parameters": [
                {
                  "name": "pathToExpand",
                  "flags": {},
                  "comment": "Path to expand.",
                  "type": "IPath"
                },
                {
                  "name": "expansion",
                  "flags": {},
                  "comment": "Distance to expand.",
                  "type": "number"
                },
                {
                  "name": "isolateCaps",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional flag to put the end caps into a separate model named \"caps\".",
                  "type": "boolean"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/expand.ts",
              "line": 28,
              "character": 26
            }
          ]
        },
        "straighten": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "straighten",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Represent an arc using straight lines.",
                "returns": "Model of straight lines with same endpoints as the arc.\n"
              },
              "parameters": [
                {
                  "name": "arc",
                  "flags": {},
                  "comment": "Arc to straighten.",
                  "type": "IPathArc"
                },
                {
                  "name": "bevel",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional flag to bevel the angle to prevent it from being too sharp.",
                  "type": "boolean"
                },
                {
                  "name": "prefix",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional string prefix to apply to path ids.",
                  "type": "string"
                },
                {
                  "name": "close",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional flag to make a closed geometry by connecting the endpoints.",
                  "type": "boolean"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/expand.ts",
              "line": 52,
              "character": 30
            }
          ]
        },
        "dogbone": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "dogbone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Adds a round corner to the outside angle between 2 lines. The lines must meet at one point.",
                "returns": "Arc path object of the new fillet.\n"
              },
              "parameters": [
                {
                  "name": "lineA",
                  "flags": {},
                  "comment": "First line to fillet, which will be modified to fit the fillet.",
                  "type": "IPathLine"
                },
                {
                  "name": "lineB",
                  "flags": {},
                  "comment": "Second line to fillet, which will be modified to fit the fillet.",
                  "type": "IPathLine"
                },
                {
                  "name": "filletRadius",
                  "flags": {},
                  "type": "number"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IPointMatchOptions"
                }
              ],
              "type": "IPathArc"
            }
          ],
          "sources": [
            {
              "fileName": "core/fillet.ts",
              "line": 308,
              "character": 27
            }
          ]
        },
        "fillet": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "fillet",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Adds a round corner to the inside angle between 2 paths. The paths must meet at one point.",
                "returns": "Arc path object of the new fillet.\n"
              },
              "parameters": [
                {
                  "name": "pathA",
                  "flags": {},
                  "comment": "First path to fillet, which will be modified to fit the fillet.",
                  "type": "IPath"
                },
                {
                  "name": "pathB",
                  "flags": {},
                  "comment": "Second path to fillet, which will be modified to fit the fillet.",
                  "type": "IPath"
                },
                {
                  "name": "filletRadius",
                  "flags": {},
                  "comment": "Radius of the fillet.",
                  "type": "number"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional IPointMatchOptions object to specify pointMatchingDistance.",
                  "type": "IPointMatchOptions"
                }
              ],
              "type": "IPathArc"
            }
          ],
          "sources": [
            {
              "fileName": "core/fillet.ts",
              "line": 375,
              "character": 26
            }
          ]
        },
        "intersection": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "intersection",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find the point(s) where 2 paths intersect.",
                "returns": "IPathIntersection object, with points(s) of intersection (and angles, when a path is an arc or circle); or null if the paths did not intersect.\n"
              },
              "parameters": [
                {
                  "name": "path1",
                  "flags": {},
                  "comment": "First path to find intersection.",
                  "type": "IPath"
                },
                {
                  "name": "path2",
                  "flags": {},
                  "comment": "Second path to find intersection.",
                  "type": "IPath"
                },
                {
                  "name": "options",
                  "flags": {},
                  "comment": "Optional IPathIntersectionOptions.",
                  "type": "IPathIntersectionOptions",
                  "defaultValue": " {}"
                }
              ],
              "type": "IPathIntersection"
            }
          ],
          "sources": [
            {
              "fileName": "core/intersect.ts",
              "line": 240,
              "character": 32
            }
          ]
        },
        "addTo": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addTo",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a path to a model. This is basically equivalent to:\n```\nparentModel.paths[pathId] = childPath;\n```\nwith additional checks to make it safe for cascading.",
                "returns": "The original path (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "childPath",
                  "flags": {},
                  "comment": "The path to add.",
                  "type": "IPath"
                },
                {
                  "name": "parentModel",
                  "flags": {},
                  "comment": "The model to add to.",
                  "type": "IModel"
                },
                {
                  "name": "pathId",
                  "flags": {},
                  "comment": "The id of the path.",
                  "type": "string"
                },
                {
                  "name": "overwrite",
                  "flags": {},
                  "comment": "Optional flag to overwrite any path referenced by pathId. Default is false, which will create an id similar to pathId.",
                  "type": "boolean",
                  "defaultValue": "false"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 16,
              "character": 25
            }
          ]
        },
        "alterLength": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "alterLength",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Alter a path by lengthening or shortening it.",
                "returns": "The original path (for cascading), or null if the path could not be altered.\n"
              },
              "parameters": [
                {
                  "name": "pathToAlter",
                  "flags": {},
                  "comment": "Path to alter.",
                  "type": "IPath"
                },
                {
                  "name": "distance",
                  "flags": {},
                  "comment": "Numeric amount of length to add or remove from the path. Use a positive number to lengthen, negative to shorten. When shortening: this function will not alter the path and will return null if the resulting path length is less than or equal to zero.",
                  "type": "number"
                },
                {
                  "name": "useOrigin",
                  "flags": {},
                  "comment": "Optional flag to alter from the origin instead of the end of the path.",
                  "type": "boolean",
                  "defaultValue": "false"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 488,
              "character": 31
            }
          ]
        },
        "center": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "center",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Center a path at [0, 0].",
                "returns": "The original path (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "pathToCenter",
                  "flags": {},
                  "comment": "The path to center.",
                  "type": "IPath"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 600,
              "character": 26
            }
          ]
        },
        "clone": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "clone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a clone of a path. This is faster than cloneObject.",
                "returns": "Cloned path.\n"
              },
              "parameters": [
                {
                  "name": "pathToClone",
                  "flags": {},
                  "comment": "The path to clone.",
                  "type": "IPath"
                },
                {
                  "name": "offset",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional point to move path a relative distance.",
                  "type": "IPoint"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 66,
              "character": 25
            }
          ]
        },
        "converge": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "converge",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Connect 2 lines at their slope intersection point.",
                "returns": "point of convergence.\n"
              },
              "parameters": [
                {
                  "name": "lineA",
                  "flags": {},
                  "comment": "First line to converge.",
                  "type": "IPathLine"
                },
                {
                  "name": "lineB",
                  "flags": {},
                  "comment": "Second line to converge.",
                  "type": "IPathLine"
                },
                {
                  "name": "useOriginA",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional flag to converge the origin point of lineA instead of the end point.",
                  "type": "boolean"
                },
                {
                  "name": "useOriginB",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional flag to converge the origin point of lineB instead of the end point.",
                  "type": "boolean"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 413,
              "character": 28
            }
          ]
        },
        "copyProps": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "copyProps",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Copy the schema properties of one path to another.",
                "returns": "The source path.\n"
              },
              "parameters": [
                {
                  "name": "srcPath",
                  "flags": {},
                  "comment": "The source path to copy property values from.",
                  "type": "IPath"
                },
                {
                  "name": "destPath",
                  "flags": {},
                  "comment": "The destination path to copy property values to.",
                  "type": "IPath"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 83,
              "character": 29
            }
          ]
        },
        "distort": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "distort",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Distort a path - scale x and y individually.",
                "returns": "A new IModel (for circles and arcs) or IPath (for lines and bezier seeds).\n"
              },
              "parameters": [
                {
                  "name": "pathToDistort",
                  "flags": {},
                  "comment": "The path to distort.",
                  "type": "IPath"
                },
                {
                  "name": "scaleX",
                  "flags": {},
                  "comment": "The amount of x scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleY",
                  "flags": {},
                  "comment": "The amount of y scaling.",
                  "type": "number"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 387,
              "character": 27
            }
          ]
        },
        "layer": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "layer",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Set the layer of a path. This is equivalent to:\n```\npathContext.layer = layer;\n```",
                "returns": "The original path (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "pathContext",
                  "flags": {},
                  "comment": "The path to set the layer.",
                  "type": "IPath"
                },
                {
                  "name": "layer",
                  "flags": {},
                  "comment": "The layer name.",
                  "type": "string"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 149,
              "character": 25
            }
          ]
        },
        "mirror": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "mirror",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a clone of a path, mirrored on either or both x and y axes.",
                "returns": "Mirrored path.\n"
              },
              "parameters": [
                {
                  "name": "pathToMirror",
                  "flags": {},
                  "comment": "The path to mirror.",
                  "type": "IPath"
                },
                {
                  "name": "mirrorX",
                  "flags": {},
                  "comment": "Boolean to mirror on the x axis.",
                  "type": "boolean"
                },
                {
                  "name": "mirrorY",
                  "flags": {},
                  "comment": "Boolean to mirror on the y axis.",
                  "type": "boolean"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 162,
              "character": 26
            }
          ]
        },
        "move": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "move",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a path to an absolute point.",
                "returns": "The original path (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "pathToMove",
                  "flags": {},
                  "comment": "The path to move.",
                  "type": "IPath"
                },
                {
                  "name": "origin",
                  "flags": {},
                  "comment": "The new origin for the path.",
                  "type": "IPoint"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 196,
              "character": 24
            }
          ]
        },
        "moveRelative": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "moveRelative",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a path's origin by a relative amount.",
                "returns": "The original path (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "pathToMove",
                  "flags": {},
                  "comment": "The path to move.",
                  "type": "IPath"
                },
                {
                  "name": "delta",
                  "flags": {},
                  "comment": "The x & y adjustments as a point object.",
                  "type": "IPoint"
                },
                {
                  "name": "subtract",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional boolean to subtract instead of add.",
                  "type": "boolean"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 232,
              "character": 32
            }
          ]
        },
        "moveTemporary": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "moveTemporary",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move some paths relatively during a task execution, then unmove them."
              },
              "parameters": [
                {
                  "name": "pathsToMove",
                  "flags": {},
                  "comment": "The paths to move."
                },
                {
                  "name": "deltas",
                  "flags": {},
                  "comment": "The x & y adjustments as a point object array."
                },
                {
                  "name": "task",
                  "flags": {},
                  "comment": "The function to call while the paths are temporarily moved.\n",
                  "type": "Function"
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 254,
              "character": 33
            }
          ]
        },
        "rotate": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "rotate",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Rotate a path.",
                "returns": "The original path (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "pathToRotate",
                  "flags": {},
                  "comment": "The path to rotate.",
                  "type": "IPath"
                },
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "The amount of rotation, in degrees.",
                  "type": "number"
                },
                {
                  "name": "rotationOrigin",
                  "flags": {},
                  "comment": "The center point of rotation.",
                  "type": "IPoint",
                  "defaultValue": " [0, 0]"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 297,
              "character": 26
            }
          ]
        },
        "scale": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "scale",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Scale a path.",
                "returns": "The original path (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "pathToScale",
                  "flags": {},
                  "comment": "The path to scale.",
                  "type": "IPath"
                },
                {
                  "name": "scaleValue",
                  "flags": {},
                  "comment": "The amount of scaling.",
                  "type": "number"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 337,
              "character": 25
            }
          ]
        },
        "toKeyPoints": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toKeyPoints",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get key points (a minimal a number of points) along a path.",
                "returns": "Array of points which are on the path.\n"
              },
              "parameters": [
                {
                  "name": "pathContext",
                  "flags": {},
                  "comment": "Path to get points from.",
                  "type": "IPath"
                },
                {
                  "name": "maxArcFacet",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional maximum length between points on an arc or circle.",
                  "type": "number"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 562,
              "character": 31
            }
          ]
        },
        "toPoints": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toPoints",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get points along a path.",
                "returns": "Array of points which are on the path spread at a uniform interval.\n"
              },
              "parameters": [
                {
                  "name": "pathContext",
                  "flags": {},
                  "comment": "Path to get points from.",
                  "type": "IPath"
                },
                {
                  "name": "numberOfPoints",
                  "flags": {},
                  "comment": "Number of points to divide the path.",
                  "type": "number"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 512,
              "character": 28
            }
          ]
        },
        "zero": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "zero",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a path so its bounding box begins at [0, 0].",
                "returns": "The original path (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "pathToZero",
                  "flags": {},
                  "comment": "The path to zero.",
                  "type": "IPath"
                }
              ],
              "type": "IPath"
            }
          ],
          "sources": [
            {
              "fileName": "core/path.ts",
              "line": 614,
              "character": 24
            }
          ]
        }
      }
    },
    "chain": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/fillet.ts",
          "line": 457,
          "character": 23
        }
      ],
      "Function": {
        "cycle": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "cycle",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Shift the links of an endless chain.",
                "returns": "The chainContext for cascading.\n"
              },
              "parameters": [
                {
                  "name": "chainContext",
                  "flags": {},
                  "comment": "Chain to cycle through. Must be endless.",
                  "type": "IChain"
                },
                {
                  "name": "amount",
                  "flags": {},
                  "comment": "Optional number of links to shift. May be negative to cycle backwards.",
                  "type": "number",
                  "defaultValue": "1"
                }
              ],
              "type": "IChain"
            }
          ],
          "sources": [
            {
              "fileName": "core/chain.ts",
              "line": 466,
              "character": 25
            }
          ]
        },
        "reverse": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "reverse",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Reverse the links of a chain.",
                "returns": "The chainContext for cascading.\n"
              },
              "parameters": [
                {
                  "name": "chainContext",
                  "flags": {},
                  "comment": "Chain to reverse.",
                  "type": "IChain"
                }
              ],
              "type": "IChain"
            }
          ],
          "sources": [
            {
              "fileName": "core/chain.ts",
              "line": 488,
              "character": 27
            }
          ]
        },
        "startAt": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "startAt",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Set the beginning of an endless chain to a known routeKey of a path.",
                "returns": "The chainContext for cascading.\n"
              },
              "parameters": [
                {
                  "name": "chainContext",
                  "flags": {},
                  "comment": "Chain to cycle through. Must be endless.",
                  "type": "IChain"
                },
                {
                  "name": "routeKey",
                  "flags": {},
                  "comment": "RouteKey of the desired path to start the chain with.",
                  "type": "string"
                }
              ],
              "type": "IChain"
            }
          ],
          "sources": [
            {
              "fileName": "core/chain.ts",
              "line": 501,
              "character": 27
            }
          ]
        },
        "toKeyPoints": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toKeyPoints",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get key points (a minimal a number of points) along a chain of paths.",
                "returns": "Array of points which are on the chain.\n"
              },
              "parameters": [
                {
                  "name": "chainContext",
                  "flags": {},
                  "comment": "Chain of paths to get points from.",
                  "type": "IChain"
                },
                {
                  "name": "maxArcFacet",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "The maximum length between points on an arc or circle.",
                  "type": "number"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/chain.ts",
              "line": 633,
              "character": 31
            }
          ]
        },
        "toNewModel": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toNewModel",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Convert a chain to a new model, independent of any model from where the chain was found.",
                "returns": "A new model containing paths from the chain.\n"
              },
              "parameters": [
                {
                  "name": "chainContext",
                  "flags": {},
                  "comment": "Chain to convert to a model.",
                  "type": "IChain"
                },
                {
                  "name": "detachFromOldModel",
                  "flags": {},
                  "comment": "Flag to remove the chain's paths from their current parent model. If false, each path will be cloned. If true, the original path will be re-parented into the resulting new model. Default is false.",
                  "type": "boolean",
                  "defaultValue": "false"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/chain.ts",
              "line": 524,
              "character": 30
            }
          ]
        },
        "toPoints": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toPoints",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get points along a chain of paths.",
                "returns": "Array of points which are on the chain spread at a uniform interval.\n"
              },
              "parameters": [
                {
                  "name": "chainContext",
                  "flags": {},
                  "comment": "Chain of paths to get points from.",
                  "type": "IChain"
                },
                {
                  "name": "distanceOrDistances",
                  "flags": {}
                },
                {
                  "name": "maxPoints",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Maximum number of points to retrieve.",
                  "type": "number"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/chain.ts",
              "line": 578,
              "character": 28
            }
          ]
        },
        "chainFillet": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "chainFillet",
              "kindString": "Call signature",
              "parameters": [
                {
                  "name": "traditional",
                  "flags": {},
                  "type": "boolean"
                },
                {
                  "name": "chainToFillet",
                  "flags": {},
                  "type": "IChain"
                },
                {
                  "name": "filletSpec",
                  "flags": {},
                  "type": "any"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/fillet.ts",
              "line": 507,
              "character": 24
            }
          ]
        },
        "dogbone": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "dogbone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Adds a dogbone fillet between each link in a chain. Each path will be cropped to fit a fillet, and all fillets will be returned as paths in a returned model object.",
                "returns": "Model object containing paths which fillet the joints in the chain.\n"
              },
              "parameters": [
                {
                  "name": "chainToFillet",
                  "flags": {},
                  "comment": "The chain to add fillets to.",
                  "type": "IChain"
                },
                {
                  "name": "filletRadius",
                  "flags": {},
                  "comment": "Radius of the fillet.",
                  "type": "number"
                }
              ],
              "type": "IModel"
            },
            {
              "name": "dogbone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Adds a dogbone fillet between each link in a chain. Each path will be cropped to fit a fillet, and all fillets will be returned as paths in a returned model object.",
                "returns": "Model object containing paths which fillet the joints in the chain.\n"
              },
              "parameters": [
                {
                  "name": "chainToFillet",
                  "flags": {},
                  "comment": "The chain to add fillets to.",
                  "type": "IChain"
                },
                {
                  "name": "filletRadii",
                  "flags": {},
                  "comment": "Object specifying directional radii."
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/fillet.ts",
              "line": 466,
              "character": 27
            },
            {
              "fileName": "core/fillet.ts",
              "line": 477,
              "character": 27
            },
            {
              "fileName": "core/fillet.ts",
              "line": 479,
              "character": 27
            }
          ]
        },
        "fillet": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "fillet",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Adds a fillet between each link in a chain. Each path will be cropped to fit a fillet, and all fillets will be returned as paths in a returned model object.",
                "returns": "Model object containing paths which fillet the joints in the chain.\n"
              },
              "parameters": [
                {
                  "name": "chainToFillet",
                  "flags": {},
                  "comment": "The chain to add fillets to.",
                  "type": "IChain"
                },
                {
                  "name": "filletRadius",
                  "flags": {},
                  "comment": "Radius of the fillet.",
                  "type": "number"
                }
              ],
              "type": "IModel"
            },
            {
              "name": "fillet",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Adds a fillet between each link in a chain. Each path will be cropped to fit a fillet, and all fillets will be returned as paths in a returned model object.",
                "returns": "Model object containing paths which fillet the joints in the chain.\n"
              },
              "parameters": [
                {
                  "name": "chainToFillet",
                  "flags": {},
                  "comment": "The chain to add fillets to.",
                  "type": "IChain"
                },
                {
                  "name": "filletRadii",
                  "flags": {},
                  "comment": "Object specifying directional radii."
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/fillet.ts",
              "line": 490,
              "character": 26
            },
            {
              "fileName": "core/fillet.ts",
              "line": 501,
              "character": 26
            },
            {
              "fileName": "core/fillet.ts",
              "line": 503,
              "character": 26
            }
          ]
        }
      }
    },
    "model": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/simplify.ts",
          "line": 1,
          "character": 23
        }
      ],
      "Function": {
        "findChains": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "findChains",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find paths that have common endpoints and form chains.",
                "returns": "An array of chains, or a map (keyed by layer id) of arrays of chains - if options.byLayers is true.\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to search for chains.",
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional options object.",
                  "type": "IFindChainsOptions"
                }
              ]
            },
            {
              "name": "findChains",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find paths that have common endpoints and form chains.",
                "returns": "An array of chains, or a map (keyed by layer id) of arrays of chains - if options.byLayers is true.\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to search for chains.",
                  "type": "IModel"
                },
                {
                  "name": "callback",
                  "flags": {},
                  "comment": "Callback function when chains are found.",
                  "type": "IChainCallback"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional options object.",
                  "type": "IFindChainsOptions"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/chain.ts",
              "line": 125,
              "character": 30
            },
            {
              "fileName": "core/chain.ts",
              "line": 135,
              "character": 30
            },
            {
              "fileName": "core/chain.ts",
              "line": 137,
              "character": 30
            }
          ]
        },
        "findSingleChain": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "findSingleChain",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find a single chain within a model, across all layers. Shorthand of findChains; useful when you know there is only one chain to find in your model.",
                "returns": "A chain object or null if chains were not found.\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to search for a chain.",
                  "type": "IModel"
                }
              ],
              "type": "IChain"
            }
          ],
          "sources": [
            {
              "fileName": "core/chain.ts",
              "line": 97,
              "character": 35
            }
          ]
        },
        "breakPathsAtIntersections": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "breakPathsAtIntersections",
              "kindString": "Call signature",
              "comment": {
                "shortText": "DEPRECATED\nBreak a model's paths everywhere they intersect with another path.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToBreak",
                  "flags": {},
                  "comment": "The model containing paths to be broken.",
                  "type": "IModel"
                },
                {
                  "name": "modelToIntersect",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional model containing paths to look for intersection, or else the modelToBreak will be used.",
                  "type": "IModel"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/combine.ts",
              "line": 168,
              "character": 45
            }
          ]
        },
        "combine": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "combine",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Combine 2 models. Each model will be modified accordingly.",
                "returns": "A new model containing both of the input models as \"a\" and \"b\".\n"
              },
              "parameters": [
                {
                  "name": "modelA",
                  "flags": {},
                  "comment": "First model to combine.",
                  "type": "IModel"
                },
                {
                  "name": "modelB",
                  "flags": {},
                  "comment": "Second model to combine.",
                  "type": "IModel"
                },
                {
                  "name": "includeAInsideB",
                  "flags": {},
                  "comment": "Flag to include paths from modelA which are inside of modelB.",
                  "type": "boolean",
                  "defaultValue": "false"
                },
                {
                  "name": "includeAOutsideB",
                  "flags": {},
                  "comment": "Flag to include paths from modelA which are outside of modelB.",
                  "type": "boolean",
                  "defaultValue": "true"
                },
                {
                  "name": "includeBInsideA",
                  "flags": {},
                  "comment": "Flag to include paths from modelB which are inside of modelA.",
                  "type": "boolean",
                  "defaultValue": "false"
                },
                {
                  "name": "includeBOutsideA",
                  "flags": {},
                  "comment": "Flag to include paths from modelB which are outside of modelA.",
                  "type": "boolean",
                  "defaultValue": "true"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional ICombineOptions object.",
                  "type": "ICombineOptions"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/combine.ts",
              "line": 348,
              "character": 27
            }
          ]
        },
        "combineIntersection": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "combineIntersection",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Combine 2 models, resulting in a intersection. Each model will be modified accordingly.",
                "returns": "A new model containing both of the input models as \"a\" and \"b\".\n"
              },
              "parameters": [
                {
                  "name": "modelA",
                  "flags": {},
                  "comment": "First model to combine.",
                  "type": "IModel"
                },
                {
                  "name": "modelB",
                  "flags": {},
                  "comment": "Second model to combine.",
                  "type": "IModel"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/combine.ts",
              "line": 431,
              "character": 39
            }
          ]
        },
        "combineSubtraction": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "combineSubtraction",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Combine 2 models, resulting in a subtraction of B from A. Each model will be modified accordingly.",
                "returns": "A new model containing both of the input models as \"a\" and \"b\".\n"
              },
              "parameters": [
                {
                  "name": "modelA",
                  "flags": {},
                  "comment": "First model to combine.",
                  "type": "IModel"
                },
                {
                  "name": "modelB",
                  "flags": {},
                  "comment": "Second model to combine.",
                  "type": "IModel"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/combine.ts",
              "line": 442,
              "character": 38
            }
          ]
        },
        "combineUnion": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "combineUnion",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Combine 2 models, resulting in a union. Each model will be modified accordingly.",
                "returns": "A new model containing both of the input models as \"a\" and \"b\".\n"
              },
              "parameters": [
                {
                  "name": "modelA",
                  "flags": {},
                  "comment": "First model to combine.",
                  "type": "IModel"
                },
                {
                  "name": "modelB",
                  "flags": {},
                  "comment": "Second model to combine.",
                  "type": "IModel"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/combine.ts",
              "line": 453,
              "character": 32
            }
          ]
        },
        "isPathInsideModel": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPathInsideModel",
              "kindString": "Call signature",
              "comment": {
                "shortText": "DEPRECATED - use measure.isPointInsideModel instead.\nCheck to see if a path is inside of a model.",
                "returns": "Boolean true if the path is inside of the modelContext.\n"
              },
              "parameters": [
                {
                  "name": "pathContext",
                  "flags": {},
                  "comment": "The path to check.",
                  "type": "IPath"
                },
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to check against.",
                  "type": "IModel"
                },
                {
                  "name": "pathOffset",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IPoint"
                },
                {
                  "name": "farPoint",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional point of reference which is outside the bounds of the modelContext.",
                  "type": "IPoint"
                },
                {
                  "name": "measureAtlas",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "Atlas"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/combine.ts",
              "line": 120,
              "character": 37
            }
          ]
        },
        "removeDeadEnds": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "removeDeadEnds",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Remove paths from a model which have endpoints that do not connect to other paths.",
                "returns": "The input model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to search for dead ends.",
                  "type": "IModel"
                },
                {
                  "name": "pointMatchingDistance",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional max distance to consider two points as the same.",
                  "type": "number"
                },
                {
                  "name": "keep",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional callback function (which should return a boolean) to decide if a dead end path should be kept instead.",
                  "type": "IWalkPathBooleanCallback"
                },
                {
                  "name": "trackDeleted",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional callback function which will log discarded paths and the reason they were discarded."
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/deadend.ts",
              "line": 136,
              "character": 34
            }
          ]
        },
        "expandPaths": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "expandPaths",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Expand all paths in a model, then combine the resulting expansions.",
                "returns": "Model which surrounds the paths of the original model.\n"
              },
              "parameters": [
                {
                  "name": "modelToExpand",
                  "flags": {},
                  "comment": "Model to expand.",
                  "type": "IModel"
                },
                {
                  "name": "distance",
                  "flags": {},
                  "comment": "Distance to expand.",
                  "type": "number"
                },
                {
                  "name": "joints",
                  "flags": {},
                  "comment": "Number of points at a joint between paths. Use 0 for round joints, 1 for pointed joints, 2 for beveled joints.",
                  "type": "number",
                  "defaultValue": "0"
                },
                {
                  "name": "combineOptions",
                  "flags": {},
                  "comment": "Optional object containing combine options.",
                  "type": "ICombineOptions",
                  "defaultValue": " {}"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/expand.ts",
              "line": 101,
              "character": 31
            }
          ]
        },
        "outline": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "outline",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Outline a model by a specified distance. Useful for accommodating for kerf.",
                "returns": "Model which surrounds the paths outside of the original model.\n"
              },
              "parameters": [
                {
                  "name": "modelToOutline",
                  "flags": {},
                  "comment": "Model to outline.",
                  "type": "IModel"
                },
                {
                  "name": "distance",
                  "flags": {},
                  "comment": "Distance to outline.",
                  "type": "number"
                },
                {
                  "name": "joints",
                  "flags": {},
                  "comment": "Number of points at a joint between paths. Use 0 for round joints, 1 for pointed joints, 2 for beveled joints.",
                  "type": "number",
                  "defaultValue": "0"
                },
                {
                  "name": "inside",
                  "flags": {},
                  "comment": "Optional boolean to draw lines inside the model instead of outside.",
                  "type": "boolean",
                  "defaultValue": "false"
                },
                {
                  "name": "options",
                  "flags": {},
                  "comment": "Options to send to combine() function.",
                  "type": "ICombineOptions",
                  "defaultValue": " {}"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/expand.ts",
              "line": 248,
              "character": 27
            }
          ]
        },
        "addCaption": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addCaption",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a Caption object to a model.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to add to.",
                  "type": "IModel"
                },
                {
                  "name": "text",
                  "flags": {},
                  "comment": "Text to add.",
                  "type": "string"
                },
                {
                  "name": "leftAnchorPoint",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional Point on left side middle of text.",
                  "type": "IPoint"
                },
                {
                  "name": "rightAnchorPoint",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional Point on right side middle of text.",
                  "type": "IPoint"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 11,
              "character": 30
            }
          ]
        },
        "addModel": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addModel",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a model as a child. This is basically equivalent to:\n```\nparentModel.models[childModelId] = childModel;\n```\nwith additional checks to make it safe for cascading.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "parentModel",
                  "flags": {},
                  "comment": "The model to add to.",
                  "type": "IModel"
                },
                {
                  "name": "childModel",
                  "flags": {},
                  "comment": "The model to add.",
                  "type": "IModel"
                },
                {
                  "name": "childModelId",
                  "flags": {},
                  "comment": "The id of the child model.",
                  "type": "string"
                },
                {
                  "name": "overWrite",
                  "flags": {},
                  "comment": "Optional flag to overwrite any model referenced by childModelId. Default is false, which will create an id similar to childModelId.",
                  "type": "boolean",
                  "defaultValue": "false"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 55,
              "character": 28
            }
          ]
        },
        "addPath": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addPath",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a path as a child. This is basically equivalent to:\n```\nparentModel.paths[childPathId] = childPath;\n```\nwith additional checks to make it safe for cascading.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to add to.",
                  "type": "IModel"
                },
                {
                  "name": "pathContext",
                  "flags": {},
                  "comment": "The path to add.",
                  "type": "IPath"
                },
                {
                  "name": "pathId",
                  "flags": {},
                  "comment": "The id of the path.",
                  "type": "string"
                },
                {
                  "name": "overWrite",
                  "flags": {},
                  "comment": "Optional flag to overwrite any path referenced by pathId. Default is false, which will create an id similar to pathId.",
                  "type": "boolean",
                  "defaultValue": "false"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 35,
              "character": 27
            }
          ]
        },
        "addTo": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addTo",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a model as a child of another model. This is basically equivalent to:\n```\nparentModel.models[childModelId] = childModel;\n```\nwith additional checks to make it safe for cascading.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "childModel",
                  "flags": {},
                  "comment": "The model to add.",
                  "type": "IModel"
                },
                {
                  "name": "parentModel",
                  "flags": {},
                  "comment": "The model to add to.",
                  "type": "IModel"
                },
                {
                  "name": "childModelId",
                  "flags": {},
                  "comment": "The id of the child model.",
                  "type": "string"
                },
                {
                  "name": "overWrite",
                  "flags": {},
                  "comment": "Optional flag to overwrite any model referenced by childModelId. Default is false, which will create an id similar to childModelId.",
                  "type": "boolean",
                  "defaultValue": "false"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 75,
              "character": 25
            }
          ]
        },
        "center": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "center",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Center a model at [0, 0].",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToCenter",
                  "flags": {},
                  "comment": "The model to center.",
                  "type": "IModel"
                },
                {
                  "name": "centerX",
                  "flags": {},
                  "comment": "Boolean to center on the x axis. Default is true.",
                  "type": "boolean",
                  "defaultValue": "true"
                },
                {
                  "name": "centerY",
                  "flags": {},
                  "comment": "Boolean to center on the y axis. Default is true.",
                  "type": "boolean",
                  "defaultValue": "true"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 233,
              "character": 26
            }
          ]
        },
        "clone": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "clone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Clone a model. Alias of makerjs.cloneObject(modelToClone)",
                "returns": "A clone of the model you passed.\n"
              },
              "parameters": [
                {
                  "name": "modelToClone",
                  "flags": {},
                  "comment": "The model to clone.",
                  "type": "IModel"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 86,
              "character": 25
            }
          ]
        },
        "convertUnits": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "convertUnits",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Convert a model to match a different unit system.",
                "returns": "The scaled model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modeltoConvert",
                  "flags": {},
                  "comment": "The model to convert.",
                  "type": "IModel"
                },
                {
                  "name": "destUnitType",
                  "flags": {},
                  "comment": "The unit system.",
                  "type": "string"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 515,
              "character": 32
            }
          ]
        },
        "countChildModels": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "countChildModels",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Count the number of child models within a given model.",
                "returns": "Number of child models.\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model containing other models.",
                  "type": "IModel"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 96,
              "character": 36
            }
          ]
        },
        "distort": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "distort",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a distorted copy of a model - scale x and y individually.",
                "returns": "New model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToDistort",
                  "flags": {},
                  "comment": "The model to distort.",
                  "type": "IModel"
                },
                {
                  "name": "scaleX",
                  "flags": {},
                  "comment": "The amount of x scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleY",
                  "flags": {},
                  "comment": "The amount of y scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleOrigin",
                  "flags": {},
                  "comment": "Optional boolean to scale the origin point. Typically false for the root model.",
                  "type": "boolean",
                  "defaultValue": "false"
                },
                {
                  "name": "bezierAccuracy",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional accuracy of Bezier curves.",
                  "type": "number"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 466,
              "character": 27
            }
          ]
        },
        "getAllCaptionsOffset": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "getAllCaptionsOffset",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Gets all Caption objects, in absolute position, in this model and its children.",
                "returns": "Array of Caption objects.\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to search for Caption objects.",
                  "type": "IModel"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 113,
              "character": 40
            }
          ]
        },
        "getSimilarModelId": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "getSimilarModelId",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get an unused id in the models map with the same prefix."
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model containing the models map.",
                  "type": "IModel"
                },
                {
                  "name": "modelId",
                  "flags": {},
                  "comment": "The id to use directly (if unused), or as a prefix.\n",
                  "type": "string"
                }
              ],
              "type": "string"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 150,
              "character": 37
            }
          ]
        },
        "getSimilarPathId": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "getSimilarPathId",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get an unused id in the paths map with the same prefix."
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model containing the paths map.",
                  "type": "IModel"
                },
                {
                  "name": "pathId",
                  "flags": {},
                  "comment": "The id to use directly (if unused), or as a prefix.\n",
                  "type": "string"
                }
              ],
              "type": "string"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 160,
              "character": 36
            }
          ]
        },
        "layer": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "layer",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Set the layer of a model. This is equivalent to:\n```\nmodelContext.layer = layer;\n```",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to set the layer.",
                  "type": "IModel"
                },
                {
                  "name": "layer",
                  "flags": {},
                  "comment": "The layer name.",
                  "type": "string"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 174,
              "character": 25
            }
          ]
        },
        "mirror": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "mirror",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a clone of a model, mirrored on either or both x and y axes.",
                "returns": "Mirrored model.\n"
              },
              "parameters": [
                {
                  "name": "modelToMirror",
                  "flags": {},
                  "comment": "The model to mirror.",
                  "type": "IModel"
                },
                {
                  "name": "mirrorX",
                  "flags": {},
                  "comment": "Boolean to mirror on the x axis.",
                  "type": "boolean"
                },
                {
                  "name": "mirrorY",
                  "flags": {},
                  "comment": "Boolean to mirror on the y axis.",
                  "type": "boolean"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 250,
              "character": 26
            }
          ]
        },
        "move": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "move",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a model to an absolute point. Note that this is also accomplished by directly setting the origin property. This function exists for cascading.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToMove",
                  "flags": {},
                  "comment": "The model to move.",
                  "type": "IModel"
                },
                {
                  "name": "origin",
                  "flags": {},
                  "comment": "The new position of the model.",
                  "type": "IPoint"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 313,
              "character": 24
            }
          ]
        },
        "moveRelative": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "moveRelative",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a model's origin by a relative amount.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToMove",
                  "flags": {},
                  "comment": "The model to move.",
                  "type": "IModel"
                },
                {
                  "name": "delta",
                  "flags": {},
                  "comment": "The x & y adjustments as a point object.",
                  "type": "IPoint"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 325,
              "character": 32
            }
          ]
        },
        "originate": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "originate",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Moves all of a model's children (models and paths, recursively) in reference to a single common origin. Useful when points between children need to connect to each other.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToOriginate",
                  "flags": {},
                  "comment": "The model to originate.",
                  "type": "IModel"
                },
                {
                  "name": "origin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional offset reference point.",
                  "type": "IPoint"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 186,
              "character": 29
            }
          ]
        },
        "prefixPathIds": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "prefixPathIds",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Prefix the ids of paths in a model.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToPrefix",
                  "flags": {},
                  "comment": "The model to prefix.",
                  "type": "IModel"
                },
                {
                  "name": "prefix",
                  "flags": {},
                  "comment": "The prefix to prepend on paths ids.",
                  "type": "string"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 341,
              "character": 33
            }
          ]
        },
        "rotate": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "rotate",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Rotate a model.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToRotate",
                  "flags": {},
                  "comment": "The model to rotate.",
                  "type": "IModel"
                },
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "The amount of rotation, in degrees.",
                  "type": "number"
                },
                {
                  "name": "rotationOrigin",
                  "flags": {},
                  "comment": "The center point of rotation.",
                  "type": "IPoint",
                  "defaultValue": " [0, 0]"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 370,
              "character": 26
            }
          ]
        },
        "scale": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "scale",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Scale a model.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToScale",
                  "flags": {},
                  "comment": "The model to scale.",
                  "type": "IModel"
                },
                {
                  "name": "scaleValue",
                  "flags": {},
                  "comment": "The amount of scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleOrigin",
                  "flags": {},
                  "comment": "Optional boolean to scale the origin point. Typically false for the root model.",
                  "type": "boolean",
                  "defaultValue": "false"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 406,
              "character": 25
            }
          ]
        },
        "walk": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "walk",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Recursively walk through all child models and paths for a given model.",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to walk.",
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {},
                  "comment": "Object containing callbacks.",
                  "type": "IWalkOptions"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 562,
              "character": 24
            }
          ]
        },
        "walkPaths": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "walkPaths",
              "kindString": "Call signature",
              "comment": {
                "shortText": "DEPRECATED - use model.walk instead.\nRecursively walk through all paths for a given model."
              },
              "parameters": [
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to walk.",
                  "type": "IModel"
                },
                {
                  "name": "callback",
                  "flags": {},
                  "comment": "Callback for each path.\n",
                  "type": "IModelPathCallback"
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 538,
              "character": 29
            }
          ]
        },
        "zero": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "zero",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a model so its bounding box begins at [0, 0].",
                "returns": "The original model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToZero",
                  "flags": {},
                  "comment": "The model to zero.",
                  "type": "IModel"
                },
                {
                  "name": "zeroX",
                  "flags": {},
                  "comment": "Boolean to zero on the x axis. Default is true.",
                  "type": "boolean",
                  "defaultValue": "true"
                },
                {
                  "name": "zeroY",
                  "flags": {},
                  "comment": "Boolean to zero on the y axis. Default is true.",
                  "type": "boolean",
                  "defaultValue": "true"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/model.ts",
              "line": 633,
              "character": 24
            }
          ]
        },
        "simplify": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "simplify",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Simplify a model's paths by reducing redundancy: combine multiple overlapping paths into a single path. The model must be originated.",
                "returns": "The simplified model (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "modelToSimplify",
                  "flags": {},
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional options object.",
                  "type": "ISimplifyOptions"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/simplify.ts",
              "line": 56,
              "character": 28
            }
          ]
        }
      }
    },
    "exporter": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/xml.ts",
          "line": 1,
          "character": 26
        }
      ],
      "Interface": {
        "IDXFLayerOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "DXF layer options."
          },
          "sources": [
            {
              "fileName": "core/dxf.ts",
              "line": 330,
              "character": 37
            }
          ],
          "Property": {
            "color": {
              "flags": {
                "isExported": true
              },
              "comment": {
                "shortText": "DXF layer color."
              },
              "sources": [
                {
                  "fileName": "core/dxf.ts",
                  "line": 335,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          }
        },
        "IDXFRenderOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "DXF rendering options."
          },
          "sources": [
            {
              "fileName": "core/dxf.ts",
              "line": 341,
              "character": 38
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IExportOptions"
            },
            {
              "type": "reference",
              "name": "IPointMatchOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "fontSize": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Text size for MTEXT entities."
              },
              "sources": [
                {
                  "fileName": "core/dxf.ts",
                  "line": 346,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "layerOptions": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "DXF options per layer."
              },
              "sources": [
                {
                  "fileName": "core/dxf.ts",
                  "line": 351,
                  "character": 20
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "name": "__type",
                  "kindString": "Type literal",
                  "flags": {
                    "isExported": true
                  },
                  "indexSignature": {
                    "name": "__index",
                    "kindString": "Index signature",
                    "flags": {},
                    "parameters": [
                      {
                        "name": "layerId",
                        "kindString": "Parameter",
                        "flags": {},
                        "type": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ],
                    "type": {
                      "type": "reference",
                      "name": "IDXFLayerOptions"
                    }
                  },
                  "sources": [
                    {
                      "fileName": "core/dxf.ts",
                      "line": 351,
                      "character": 22
                    }
                  ]
                }
              }
            },
            "pointMatchingDistance": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Max distance to consider two points as the same."
              },
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 532,
                  "character": 29
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IPointMatchOptions.pointMatchingDistance"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            },
            "usePOLYLINE": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Flag to use POLYLINE"
              },
              "sources": [
                {
                  "fileName": "core/dxf.ts",
                  "line": 356,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          }
        },
        "IJsonExportOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Options for JSON export."
          },
          "sources": [
            {
              "fileName": "core/exporter.ts",
              "line": 22,
              "character": 39
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IExportOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "indentation": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional number of characters to indent after a newline."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 27,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            }
          }
        },
        "IStatusCallback": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "__call",
              "kindString": "Call signature",
              "parameters": [
                {
                  "name": "status",
                  "flags": {}
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/exporter.ts",
              "line": 88,
              "character": 36
            }
          ]
        },
        "IJscadCagOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Jscad CAG export options."
          },
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 501,
              "character": 37
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IExportOptions"
            },
            {
              "type": "reference",
              "name": "IPointMatchOptions"
            }
          ],
          "extendedBy": [
            {
              "type": "reference",
              "name": "IJscadCsgOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "byLayers": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Flag to separate chains by layers."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 506,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            "maxArcFacet": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The maximum length between points on an arc or circle."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 511,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "pointMatchingDistance": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Max distance to consider two points as the same."
              },
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 532,
                  "character": 29
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IPointMatchOptions.pointMatchingDistance"
              }
            },
            "statusCallback": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional callback to get status during the export."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 516,
                  "character": 22
                }
              ],
              "type": {
                "type": "reference",
                "name": "IStatusCallback"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            }
          }
        },
        "IJscadCsgOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Jscad CSG export options."
          },
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 538,
              "character": 37
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IJscadCagOptions"
            },
            {
              "type": "reference",
              "name": "IJscadExtrudeOptions"
            }
          ],
          "extendedBy": [
            {
              "type": "reference",
              "name": "IJscadScriptOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "byLayers": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Flag to separate chains by layers."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 506,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadCagOptions.byLayers"
              }
            },
            "extrude": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional depth of 3D extrusion."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 527,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadExtrudeOptions.extrude"
              }
            },
            "layerOptions": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG options per layer."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 543,
                  "character": 20
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "name": "__type",
                  "kindString": "Type literal",
                  "flags": {},
                  "indexSignature": {
                    "name": "__index",
                    "kindString": "Index signature",
                    "flags": {},
                    "parameters": [
                      {
                        "name": "layerId",
                        "kindString": "Parameter",
                        "flags": {},
                        "type": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ],
                    "type": {
                      "type": "reference",
                      "name": "IJscadExtrudeOptions"
                    }
                  },
                  "sources": [
                    {
                      "fileName": "core/openjscad.ts",
                      "line": 543,
                      "character": 22
                    }
                  ]
                }
              }
            },
            "maxArcFacet": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The maximum length between points on an arc or circle."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 511,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadCagOptions.maxArcFacet"
              }
            },
            "pointMatchingDistance": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Max distance to consider two points as the same."
              },
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 532,
                  "character": 29
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IPointMatchOptions.pointMatchingDistance"
              }
            },
            "statusCallback": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional callback to get status during the export."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 516,
                  "character": 22
                }
              ],
              "type": {
                "type": "reference",
                "name": "IStatusCallback"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadCagOptions.statusCallback"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            },
            "z": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional depth of 3D extrusion."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 532,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadExtrudeOptions.z"
              }
            }
          }
        },
        "IJscadExtrudeOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Jscad CAG extrusion options."
          },
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 522,
              "character": 41
            }
          ],
          "extendedBy": [
            {
              "type": "reference",
              "name": "IJscadCsgOptions"
            }
          ],
          "Property": {
            "extrude": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional depth of 3D extrusion."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 527,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "z": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional depth of 3D extrusion."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 532,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          }
        },
        "IJscadScriptOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Jscad Script export options."
          },
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 549,
              "character": 40
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IJscadCsgOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "byLayers": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Flag to separate chains by layers."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 506,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadCagOptions.byLayers"
              }
            },
            "extrude": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional depth of 3D extrusion."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 527,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadExtrudeOptions.extrude"
              }
            },
            "functionName": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional override of function name, default is \"main\"."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 554,
                  "character": 20
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "indent": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional number of spaces to indent."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 559,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "layerOptions": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG options per layer."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 543,
                  "character": 20
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "name": "__type",
                  "kindString": "Type literal",
                  "flags": {},
                  "indexSignature": {
                    "name": "__index",
                    "kindString": "Index signature",
                    "flags": {},
                    "parameters": [
                      {
                        "name": "layerId",
                        "kindString": "Parameter",
                        "flags": {},
                        "type": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ],
                    "type": {
                      "type": "reference",
                      "name": "IJscadExtrudeOptions"
                    }
                  },
                  "sources": [
                    {
                      "fileName": "core/openjscad.ts",
                      "line": 543,
                      "character": 22
                    }
                  ]
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadCsgOptions.layerOptions"
              }
            },
            "maxArcFacet": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "The maximum length between points on an arc or circle."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 511,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadCagOptions.maxArcFacet"
              }
            },
            "pointMatchingDistance": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Max distance to consider two points as the same."
              },
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 532,
                  "character": 29
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IPointMatchOptions.pointMatchingDistance"
              }
            },
            "statusCallback": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional callback to get status during the export."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 516,
                  "character": 22
                }
              ],
              "type": {
                "type": "reference",
                "name": "IStatusCallback"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadCagOptions.statusCallback"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            },
            "z": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional depth of 3D extrusion."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 532,
                  "character": 9
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IJscadExtrudeOptions.z"
              }
            }
          }
        },
        "IOpenJsCadOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "OpenJsCad export options."
          },
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 468,
              "character": 38
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IFindLoopsOptions"
            },
            {
              "type": "reference",
              "name": "IExportOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "extrusion": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional depth of 3D extrusion."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 473,
                  "character": 17
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "facetSize": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional size of curve facets."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 478,
                  "character": 17
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "functionName": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional override of function name, default is \"main\"."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 483,
                  "character": 20
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "modelMap": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional options applied to specific first-child models by model id."
              },
              "sources": [
                {
                  "fileName": "core/openjscad.ts",
                  "line": 488,
                  "character": 16
                }
              ],
              "type": {
                "type": "reference",
                "name": "IOpenJsCadOptionsMap"
              }
            },
            "pointMatchingDistance": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Max distance to consider two points as the same."
              },
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 532,
                  "character": 29
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IPointMatchOptions.pointMatchingDistance"
              }
            },
            "removeFromOriginal": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Flag to remove looped paths from the original model."
              },
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 586,
                  "character": 26
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IFindLoopsOptions.removeFromOriginal"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            }
          }
        },
        "IOpenJsCadOptionsMap": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Map of OpenJsCad export options."
          },
          "indexSignature": {
            "name": "__index",
            "kindString": "Index signature",
            "flags": {},
            "comment": {
              "shortText": "Map of OpenJsCad export options."
            },
            "parameters": [
              {
                "name": "modelId",
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "type": {
              "type": "reference",
              "name": "IOpenJsCadOptions"
            }
          },
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 494,
              "character": 41
            }
          ]
        },
        "IPDFRenderOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "PDF rendering options."
          },
          "sources": [
            {
              "fileName": "core/pdf.ts",
              "line": 118,
              "character": 38
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IExportOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "fontName": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Font name, see list at https://github.com/foliojs/pdfkit/blob/master/docs/text.coffee.md#fonts"
              },
              "sources": [
                {
                  "fileName": "core/pdf.ts",
                  "line": 123,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "fontSize": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Font size."
              },
              "sources": [
                {
                  "fileName": "core/pdf.ts",
                  "line": 128,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Rendered reference origin."
              },
              "sources": [
                {
                  "fileName": "core/pdf.ts",
                  "line": 133,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              }
            },
            "stroke": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG color of the rendered paths."
              },
              "sources": [
                {
                  "fileName": "core/pdf.ts",
                  "line": 138,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            }
          }
        },
        "IFlowAnnotation": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": " Annotate paths with directional flow marks."
          },
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 839,
              "character": 36
            }
          ],
          "Property": {
            "size": {
              "flags": {
                "isExported": true
              },
              "comment": {
                "shortText": "Size of flow marks (arrows and circle)."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 844,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          }
        },
        "IPathDataByLayerMap": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Map of SVG Path Data by layer name."
          },
          "indexSignature": {
            "name": "__index",
            "kindString": "Index signature",
            "flags": {},
            "comment": {
              "shortText": "Map of SVG Path Data by layer name."
            },
            "parameters": [
              {
                "name": "layer",
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "string"
            }
          },
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 6,
              "character": 40
            }
          ]
        },
        "ISVGElementRenderOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "SVG rendering options."
          },
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 813,
              "character": 45
            }
          ],
          "extendedBy": [
            {
              "type": "reference",
              "name": "ISVGRenderOptions"
            }
          ],
          "Property": {
            "cssStyle": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "CSS style to apply to elements."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 833,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "fill": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG fill color."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 818,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "stroke": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG color of the rendered paths."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 823,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "strokeWidth": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG stroke width of paths. This may have a unit type suffix, if not, the value will be in the same unit system as the units property."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 828,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          }
        },
        "ISVGPathDataRenderOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "SVG Path Data rendering options."
          },
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 921,
              "character": 46
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IExportOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "byLayers": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional boolean flag to return a map of path data by layer."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 926,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            "fillRule": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG fill-rule."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 931,
                  "character": 16
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "stringLiteral",
                    "value": "nonzero"
                  },
                  {
                    "type": "stringLiteral",
                    "value": "evenodd"
                  }
                ]
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional origin. Default x = 0, y = topmost y point in the model. Use [0, 0] to use the same origin as Maker.js, which will translate to negative Y values in SVG."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 936,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            }
          }
        },
        "ISVGRenderOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "SVG rendering options."
          },
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 850,
              "character": 38
            }
          ],
          "extendedTypes": [
            {
              "type": "reference",
              "name": "IExportOptions"
            },
            {
              "type": "reference",
              "name": "ISVGElementRenderOptions"
            }
          ],
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional exemplar of number of decimal places."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 11,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.accuracy"
              }
            },
            "annotate": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": " Indicate that the id's of paths should be rendered as SVG text elements."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 870,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            "closingTags": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Flag to explicitly close XML tags."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 915,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            "cssStyle": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "CSS style to apply to elements."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 833,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "ISVGElementRenderOptions.cssStyle"
              }
            },
            "fill": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG fill color."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 818,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "ISVGElementRenderOptions.fill"
              }
            },
            "fillRule": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG fill rule."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 895,
                  "character": 16
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "stringLiteral",
                    "value": "nonzero"
                  },
                  {
                    "type": "stringLiteral",
                    "value": "evenodd"
                  }
                ]
              }
            },
            "flow": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": " Options to show direction of path flow."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 875,
                  "character": 12
                }
              ],
              "type": {
                "type": "reference",
                "name": "IFlowAnnotation"
              }
            },
            "fontSize": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG font size and font size units."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 860,
                  "character": 16
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "layerOptions": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG options per layer."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 905,
                  "character": 20
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "name": "__type",
                  "kindString": "Type literal",
                  "flags": {},
                  "indexSignature": {
                    "name": "__index",
                    "kindString": "Index signature",
                    "flags": {},
                    "parameters": [
                      {
                        "name": "layerId",
                        "kindString": "Parameter",
                        "flags": {},
                        "type": {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      }
                    ],
                    "type": {
                      "type": "reference",
                      "name": "ISVGElementRenderOptions"
                    }
                  },
                  "sources": [
                    {
                      "fileName": "core/svg.ts",
                      "line": 905,
                      "character": 22
                    }
                  ]
                }
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Rendered reference origin."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 880,
                  "character": 14
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              }
            },
            "scale": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Scale of the SVG rendering."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 865,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "scalingStroke": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Flag to remove the \"vector-effect: non-scaling-stroke\" attribute."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 910,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            "stroke": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG color of the rendered paths."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 823,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "ISVGElementRenderOptions.stroke"
              }
            },
            "strokeLineCap": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG stroke linecap."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 900,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "strokeWidth": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "SVG stroke width of paths. This may have a unit type suffix, if not, the value will be in the same unit system as the units property."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 828,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "ISVGElementRenderOptions.strokeWidth"
              }
            },
            "svgAttrs": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional attributes to add to the root svg tag."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 855,
                  "character": 16
                }
              ],
              "type": {
                "type": "reference",
                "name": "IXmlTagAttrs"
              }
            },
            "units": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional unit system to embed in exported file, if the export format allows alternate unit systems."
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 16,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "IExportOptions.units"
              }
            },
            "useSvgPathOnly": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Use SVG < path > elements instead of < line >, < circle > etc."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 885,
                  "character": 22
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            "viewBox": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Flag to use SVG viewbox."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 890,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            }
          }
        },
        "svgUnitConversion": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Map of MakerJs unit system to SVG unit system"
          },
          "indexSignature": {
            "name": "__index",
            "kindString": "Index signature",
            "flags": {},
            "comment": {
              "shortText": "Map of MakerJs unit system to SVG unit system"
            },
            "parameters": [
              {
                "name": "unitType",
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "flags": {},
                "children": [
                  {
                    "name": "scaleConversion",
                    "kindString": "Variable",
                    "flags": {},
                    "sources": [
                      {
                        "fileName": "core/svg.ts",
                        "line": 790,
                        "character": 66
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  },
                  {
                    "name": "svgUnitType",
                    "kindString": "Variable",
                    "flags": {},
                    "sources": [
                      {
                        "fileName": "core/svg.ts",
                        "line": 790,
                        "character": 41
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ],
                "sources": [
                  {
                    "fileName": "core/svg.ts",
                    "line": 790,
                    "character": 27
                  }
                ]
              }
            }
          },
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 789,
              "character": 38
            }
          ]
        }
      },
      "Function": {
        "toDXF": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Renders an item in AutoDesk DFX file format.",
            "returns": "String of DXF content.\n"
          },
          "signatures": [
            {
              "name": "toDXF",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Renders an item in AutoDesk DFX file format.",
                "returns": "String of DXF content.\n"
              },
              "parameters": [
                {
                  "name": "modelToExport",
                  "flags": {},
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IDXFRenderOptions"
                }
              ],
              "type": "string"
            },
            {
              "name": "toDXF",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Renders an item in AutoDesk DFX file format.",
                "returns": "String of DXF content.\n"
              },
              "parameters": [
                {
                  "name": "pathsToExport",
                  "flags": {}
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IDXFRenderOptions"
                }
              ],
              "type": "string"
            },
            {
              "name": "toDXF",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Renders an item in AutoDesk DFX file format.",
                "returns": "String of DXF content.\n"
              },
              "parameters": [
                {
                  "name": "pathToExport",
                  "flags": {},
                  "type": "IPath"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IDXFRenderOptions"
                }
              ],
              "type": "string"
            }
          ],
          "sources": [
            {
              "fileName": "core/dxf.ts",
              "line": 3,
              "character": 25
            },
            {
              "fileName": "core/dxf.ts",
              "line": 4,
              "character": 25
            },
            {
              "fileName": "core/dxf.ts",
              "line": 5,
              "character": 25
            },
            {
              "fileName": "core/dxf.ts",
              "line": 15,
              "character": 25
            }
          ]
        },
        "toJson": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toJson",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Renders an item in JSON.",
                "returns": "String of DXF content.\n"
              },
              "parameters": [
                {
                  "name": "itemToExport",
                  "flags": {},
                  "comment": "Item to render: may be a path, an array of paths, or a model object.",
                  "type": "any"
                },
                {
                  "name": "options",
                  "flags": {},
                  "comment": "Rendering options object.",
                  "type": "IJsonExportOptions",
                  "defaultValue": " {}"
                }
              ],
              "type": "string"
            }
          ],
          "sources": [
            {
              "fileName": "core/exporter.ts",
              "line": 39,
              "character": 26
            }
          ]
        },
        "toJscadCAG": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toJscadCAG",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Converts a model to a @jscad/csg CAG object - 2D to 2D. See https://en.wikibooks.org/wiki/OpenJSCAD_User_Guide#2D_Paths",
                "text": "Example:\n```\n//First, use npm install @jscad/csg from the command line in your jscad project\n//Create a CAG instance from a model.\nvar { CAG } = require('@jscad/csg');\nvar model = new makerjs.models.Ellipse(70, 40);\nvar cag = makerjs.exporter.toJscadCAG(CAG, model, {maxArcFacet: 1});\n```\n",
                "returns": "jscad CAG object in 2D, or a map (keyed by layer id) of jscad CAG objects - if options.byLayers is true.\n"
              },
              "parameters": [
                {
                  "name": "jscadCAG",
                  "flags": {},
                  "comment": "@jscad/csg CAG engine, see https://www.npmjs.com/package/@jscad/csg",
                  "type": "CAG"
                },
                {
                  "name": "modelToExport",
                  "flags": {},
                  "comment": "Model object to export.",
                  "type": "IModel"
                },
                {
                  "name": "jsCadCagOptions",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IJscadCagOptions"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 183,
              "character": 30
            }
          ]
        },
        "toJscadCSG": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toJscadCSG",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Converts a model to a @jscad/csg CSG object - 2D to 3D.",
                "text": "Example:\n```\n//First, use npm install @jscad/csg from the command line in your jscad project\n//Create a CSG instance from a model.\nvar { CAG } = require('@jscad/csg');\nvar model = new makerjs.models.Ellipse(70, 40);\nvar csg = makerjs.exporter.toJscadCSG(CAG, model, {maxArcFacet: 1, extrude: 10});\n```\n",
                "returns": "jscad CAG object in 2D, or a map (keyed by layer id) of jscad CAG objects - if options.byLayers is true.\n"
              },
              "parameters": [
                {
                  "name": "jscadCAG",
                  "flags": {},
                  "comment": "@jscad/csg CAG engine, see https://www.npmjs.com/package/@jscad/csg",
                  "type": "CAG"
                },
                {
                  "name": "modelToExport",
                  "flags": {},
                  "comment": "Model object to export.",
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional options object.",
                  "type": "IJscadCsgOptions"
                }
              ],
              "type": "CSG"
            }
          ],
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 320,
              "character": 30
            }
          ]
        },
        "toJscadSTL": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toJscadSTL",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Exports a model in STL format - 2D to 3D.",
                "returns": "String in STL ASCII format.\n"
              },
              "parameters": [
                {
                  "name": "CAG",
                  "flags": {},
                  "type": "CAG"
                },
                {
                  "name": "stlSerializer",
                  "flags": {},
                  "comment": "@jscad/stl-serializer, see https://www.npmjs.com/package/@jscad/stl-serializer",
                  "type": "StlSerializer"
                },
                {
                  "name": "modelToExport",
                  "flags": {},
                  "comment": "Model object to export.",
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional options object.",
                  "type": "IJscadCsgOptions"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 458,
              "character": 30
            }
          ]
        },
        "toJscadScript": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toJscadScript",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Creates a string of JavaScript code for execution with a Jscad environment.",
                "returns": "String of JavaScript containing a main() function for Jscad.\n"
              },
              "parameters": [
                {
                  "name": "modelToExport",
                  "flags": {},
                  "comment": "Model object to export.",
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {},
                  "comment": "Export options object.",
                  "type": "IJscadScriptOptions",
                  "defaultValue": " {}"
                }
              ],
              "type": "string"
            }
          ],
          "sources": [
            {
              "fileName": "core/openjscad.ts",
              "line": 405,
              "character": 33
            }
          ]
        },
        "toPDF": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toPDF",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Injects drawing into a PDFKit document.",
                "returns": "String of PDF file contents.\n"
              },
              "parameters": [
                {
                  "name": "doc",
                  "flags": {},
                  "comment": "PDFKit.PDFDocument object. See https://pdfkit.org/",
                  "type": "PDFDocument"
                },
                {
                  "name": "modelToExport",
                  "flags": {},
                  "comment": "Model object to export.",
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Export options object.",
                  "type": "IPDFRenderOptions"
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/pdf.ts",
              "line": 11,
              "character": 25
            }
          ]
        },
        "chainToSVGPathData": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "chainToSVGPathData",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Convert a chain to SVG path data.",
                "returns": "String of SVG path data.\n"
              },
              "parameters": [
                {
                  "name": "chain",
                  "flags": {},
                  "comment": "Chain to convert.",
                  "type": "IChain"
                },
                {
                  "name": "offset",
                  "flags": {},
                  "comment": "IPoint relative offset point.",
                  "type": "IPoint"
                },
                {
                  "name": "accuracy",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional accuracy of SVG path data.",
                  "type": "number"
                }
              ],
              "type": "string"
            }
          ],
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 78,
              "character": 38
            }
          ]
        },
        "pathToSVGPathData": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "pathToSVGPathData",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Export a path to SVG path data.",
                "returns": "String of SVG path data.\n"
              },
              "parameters": [
                {
                  "name": "pathToExport",
                  "flags": {},
                  "comment": "IPath to export.",
                  "type": "IPath"
                },
                {
                  "name": "pathOffset",
                  "flags": {},
                  "comment": "IPoint relative offset of the path object.",
                  "type": "IPoint"
                },
                {
                  "name": "exportOffset",
                  "flags": {},
                  "comment": "IPoint relative offset point of the export.",
                  "type": "IPoint"
                },
                {
                  "name": "accuracy",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional accuracy of SVG path data.",
                  "type": "number"
                },
                {
                  "name": "clockwiseCircle",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional flag to use clockwise winding for circles.",
                  "type": "boolean"
                }
              ],
              "type": "string"
            }
          ],
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 177,
              "character": 37
            }
          ]
        },
        "toSVG": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Renders an item in SVG markup.",
            "returns": "String of XML / SVG content.\n"
          },
          "signatures": [
            {
              "name": "toSVG",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Renders an item in SVG markup.",
                "returns": "String of XML / SVG content.\n"
              },
              "parameters": [
                {
                  "name": "modelToExport",
                  "flags": {},
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "ISVGRenderOptions"
                }
              ],
              "type": "string"
            },
            {
              "name": "toSVG",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Renders an item in SVG markup.",
                "returns": "String of XML / SVG content.\n"
              },
              "parameters": [
                {
                  "name": "pathsToExport",
                  "flags": {}
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "ISVGRenderOptions"
                }
              ],
              "type": "string"
            },
            {
              "name": "toSVG",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Renders an item in SVG markup.",
                "returns": "String of XML / SVG content.\n"
              },
              "parameters": [
                {
                  "name": "pathToExport",
                  "flags": {},
                  "type": "IPath"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "ISVGRenderOptions"
                }
              ],
              "type": "string"
            }
          ],
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 300,
              "character": 25
            },
            {
              "fileName": "core/svg.ts",
              "line": 301,
              "character": 25
            },
            {
              "fileName": "core/svg.ts",
              "line": 302,
              "character": 25
            },
            {
              "fileName": "core/svg.ts",
              "line": 318,
              "character": 25
            }
          ]
        },
        "toSVGPathData": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "toSVGPathData",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Convert a model to SVG path data.",
                "returns": "String of SVG path data (if options.byLayers is false) or an object map of path data by layer .\n"
              },
              "parameters": [
                {
                  "name": "modelToExport",
                  "flags": {},
                  "comment": "Model to export.",
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional ISVGPathDataRenderOptions object.",
                  "type": "ISVGPathDataRenderOptions"
                }
              ]
            },
            {
              "name": "toSVGPathData",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Convert a model to SVG path data.",
                "returns": "String of SVG path data (if byLayers is false) or an object map of path data by layer .\n"
              },
              "parameters": [
                {
                  "name": "modelToExport",
                  "flags": {},
                  "comment": "Model to export.",
                  "type": "IModel"
                },
                {
                  "name": "byLayers",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional boolean flag to return a map of path data by layer.",
                  "type": "boolean"
                },
                {
                  "name": "origin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional origin. Default x = 0, y = topmost y point in the model. Use [0, 0] to use the same origin as Maker.js, which will translate to negative Y values in SVG.",
                  "type": "IPoint"
                },
                {
                  "name": "accuracy",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional accuracy of SVG decimals.",
                  "type": "number"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 247,
              "character": 33
            },
            {
              "fileName": "core/svg.ts",
              "line": 258,
              "character": 33
            },
            {
              "fileName": "core/svg.ts",
              "line": 260,
              "character": 33
            }
          ]
        }
      },
      "Object literal": {
        "colors": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Named colors, safe for CSS and DXF\n17 colors from https://www.w3.org/TR/CSS21/syndata.html#value-def-color mapped to DXF equivalent AutoDesk Color Index"
          },
          "sources": [
            {
              "fileName": "core/exporter.ts",
              "line": 68,
              "character": 21
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "object"
          },
          "Variable": {
            "aqua": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 73,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "4"
            },
            "black": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 69,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "0"
            },
            "blue": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 74,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "5"
            },
            "fuchsia": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 75,
                  "character": 15
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "6"
            },
            "gray": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 77,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "9"
            },
            "green": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 81,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "94"
            },
            "lime": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 72,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "3"
            },
            "maroon": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 78,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "14"
            },
            "navy": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 83,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "174"
            },
            "olive": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 80,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "58"
            },
            "orange": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 79,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "30"
            },
            "purple": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 84,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "214"
            },
            "red": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 70,
                  "character": 11
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "1"
            },
            "silver": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 85,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "254"
            },
            "teal": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 82,
                  "character": 12
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "134"
            },
            "white": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 76,
                  "character": 13
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "7"
            },
            "yellow": {
              "flags": {
                "isExported": true
              },
              "sources": [
                {
                  "fileName": "core/exporter.ts",
                  "line": 71,
                  "character": 14
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "2"
            }
          }
        }
      },
      "Variable": {
        "svgUnit": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Map of MakerJs unit system to SVG unit system"
          },
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 796,
              "character": 22
            }
          ],
          "type": {
            "type": "reference",
            "name": "svgUnitConversion"
          }
        }
      }
    },
    "measure": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/measure.ts",
          "line": 1,
          "character": 25
        }
      ],
      "Function": {
        "isAngleEqual": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isAngleEqual",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find out if two angles are equal.",
                "returns": "true if angles are the same, false if they are not\n"
              },
              "parameters": [
                {
                  "name": "angleA",
                  "flags": {},
                  "comment": "First angle.",
                  "type": "number"
                },
                {
                  "name": "angleB",
                  "flags": {},
                  "comment": "Second angle.",
                  "type": "number"
                },
                {
                  "name": "accuracy",
                  "flags": {},
                  "type": "number",
                  "defaultValue": "0.0001"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 10,
              "character": 32
            }
          ]
        },
        "isPathEqual": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPathEqual",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find out if two paths are equal.",
                "returns": "true if paths are the same, false if they are not\n"
              },
              "parameters": [
                {
                  "name": "pathA",
                  "flags": {},
                  "comment": "First path.",
                  "type": "IPath"
                },
                {
                  "name": "pathB",
                  "flags": {},
                  "comment": "Second path.",
                  "type": "IPath"
                },
                {
                  "name": "withinPointDistance",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "number"
                },
                {
                  "name": "pathAOffset",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IPoint"
                },
                {
                  "name": "pathBOffset",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IPoint"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 49,
              "character": 31
            }
          ]
        },
        "isPointDistinct": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPointDistinct",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find out if a point is distinct among an array of points.",
                "returns": "false if point is equal to any point in the array.\n"
              },
              "parameters": [
                {
                  "name": "pointToCheck",
                  "flags": {},
                  "comment": "point to check.",
                  "type": "IPoint"
                },
                {
                  "name": "pointArray",
                  "flags": {},
                  "comment": "array of points."
                },
                {
                  "name": "withinDistance",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional distance to consider points equal.",
                  "type": "number"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 98,
              "character": 35
            }
          ]
        },
        "isPointEqual": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPointEqual",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find out if two points are equal.",
                "returns": "true if points are the same, false if they are not\n"
              },
              "parameters": [
                {
                  "name": "a",
                  "flags": {},
                  "comment": "First point.",
                  "type": "IPoint"
                },
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second point.",
                  "type": "IPoint"
                },
                {
                  "name": "withinDistance",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional distance to consider points equal.",
                  "type": "number"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 80,
              "character": 32
            }
          ]
        },
        "isPointOnCircle": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPointOnCircle",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find out if point is on a circle.",
                "returns": "true if point is on the circle\n"
              },
              "parameters": [
                {
                  "name": "p",
                  "flags": {},
                  "comment": "Point to check.",
                  "type": "IPoint"
                },
                {
                  "name": "circle",
                  "flags": {},
                  "comment": "Circle.",
                  "type": "IPathCircle"
                },
                {
                  "name": "withinDistance",
                  "flags": {},
                  "comment": "Optional distance of tolerance.",
                  "type": "number",
                  "defaultValue": "0"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 133,
              "character": 35
            }
          ]
        },
        "isPointOnPath": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPointOnPath",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find out if a point lies on a path."
              },
              "parameters": [
                {
                  "name": "pointToCheck",
                  "flags": {},
                  "comment": "point to check.",
                  "type": "IPoint"
                },
                {
                  "name": "onPath",
                  "flags": {},
                  "comment": "path to check against.",
                  "type": "IPath"
                },
                {
                  "name": "withinDistance",
                  "flags": {},
                  "comment": "Optional distance to consider point on the path.",
                  "type": "number",
                  "defaultValue": "0"
                },
                {
                  "name": "pathOffset",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional offset of path from [0, 0].",
                  "type": "IPoint"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional IIsPointOnPathOptions to cache computation.\n",
                  "type": "IIsPointOnPathOptions"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 171,
              "character": 33
            }
          ]
        },
        "isPointOnSlope": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPointOnSlope",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Find out if point is on a slope.",
                "returns": "true if point is on the slope\n"
              },
              "parameters": [
                {
                  "name": "p",
                  "flags": {},
                  "comment": "Point to check.",
                  "type": "IPoint"
                },
                {
                  "name": "slope",
                  "flags": {},
                  "type": "ISlope"
                },
                {
                  "name": "withinDistance",
                  "flags": {},
                  "comment": "Optional distance of tolerance.",
                  "type": "number",
                  "defaultValue": "0"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 115,
              "character": 34
            }
          ]
        },
        "isSlopeEqual": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isSlopeEqual",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check for slope equality.",
                "returns": "Boolean true if slopes are equal.\n"
              },
              "parameters": [
                {
                  "name": "slopeA",
                  "flags": {},
                  "comment": "The ISlope to test.",
                  "type": "ISlope"
                },
                {
                  "name": "slopeB",
                  "flags": {},
                  "comment": "The ISlope to check for equality.",
                  "type": "ISlope"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 187,
              "character": 32
            }
          ]
        },
        "isSlopeParallel": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isSlopeParallel",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check for parallel slopes.",
                "returns": "Boolean true if slopes are parallel.\n"
              },
              "parameters": [
                {
                  "name": "slopeA",
                  "flags": {},
                  "comment": "The ISlope to test.",
                  "type": "ISlope"
                },
                {
                  "name": "slopeB",
                  "flags": {},
                  "comment": "The ISlope to check for parallel.",
                  "type": "ISlope"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/equal.ts",
              "line": 208,
              "character": 35
            }
          ]
        },
        "augment": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "augment",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Augment a measurement - add more properties such as center point, height and width.",
                "returns": "Measurement object with augmented properties.\n"
              },
              "parameters": [
                {
                  "name": "measureToAugment",
                  "flags": {},
                  "comment": "The measurement to augment.",
                  "type": "IMeasure"
                }
              ],
              "type": "IMeasureWithCenter"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 550,
              "character": 27
            }
          ]
        },
        "boundingHexagon": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "boundingHexagon",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Measures the minimum bounding hexagon surrounding a model. The hexagon is oriented such that the right and left sides are vertical, and the top and bottom are pointed.",
                "returns": "IBoundingHex object which is a hexagon model, with an additional radius property.\n"
              },
              "parameters": [
                {
                  "name": "modelToMeasure",
                  "flags": {},
                  "comment": "The model to measure.",
                  "type": "IModel"
                }
              ],
              "type": "IBoundingHex"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 747,
              "character": 35
            }
          ]
        },
        "increase": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "increase",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Increase a measurement by an additional measurement.",
                "returns": "The increased original measurement (for cascading).\n"
              },
              "parameters": [
                {
                  "name": "baseMeasure",
                  "flags": {},
                  "comment": "The measurement to increase.",
                  "type": "IMeasure"
                },
                {
                  "name": "addMeasure",
                  "flags": {},
                  "comment": "The additional measurement.",
                  "type": "IMeasure"
                },
                {
                  "name": "augmentBaseMeasure",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional flag to call measure.augment on the measurement.",
                  "type": "boolean"
                }
              ],
              "type": "IMeasure"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 20,
              "character": 28
            }
          ]
        },
        "isArcConcaveTowardsPoint": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isArcConcaveTowardsPoint",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check for arc being concave or convex towards a given point.",
                "returns": "Boolean true if arc is concave towards point.\n"
              },
              "parameters": [
                {
                  "name": "arc",
                  "flags": {},
                  "comment": "The arc to test.",
                  "type": "IPathArc"
                },
                {
                  "name": "towardsPoint",
                  "flags": {},
                  "comment": "The point to test.",
                  "type": "IPoint"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 57,
              "character": 44
            }
          ]
        },
        "isArcOverlapping": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isArcOverlapping",
              "kindString": "Call signature",
              "comment": {
                "shortText": "DEPRECATED - use isArcSpanOverlapping() instead."
              },
              "parameters": [
                {
                  "name": "arcA",
                  "flags": {},
                  "type": "IPathArc"
                },
                {
                  "name": "arcB",
                  "flags": {},
                  "type": "IPathArc"
                },
                {
                  "name": "excludeTangents",
                  "flags": {},
                  "type": "boolean"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 77,
              "character": 36
            }
          ]
        },
        "isArcSpanOverlapping": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isArcSpanOverlapping",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check for arc overlapping another arc.",
                "returns": "Boolean true if arcA is overlapped with arcB.\n"
              },
              "parameters": [
                {
                  "name": "arcA",
                  "flags": {},
                  "comment": "The arc to test.",
                  "type": "IPathArc"
                },
                {
                  "name": "arcB",
                  "flags": {},
                  "comment": "The arc to check for overlap.",
                  "type": "IPathArc"
                },
                {
                  "name": "excludeTangents",
                  "flags": {},
                  "comment": "Boolean to exclude exact endpoints and only look for deep overlaps.",
                  "type": "boolean"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 89,
              "character": 40
            }
          ]
        },
        "isBetween": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isBetween",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check if a given number is between two given limits.",
                "returns": "Boolean true if value is between (or equal to) the limits.\n"
              },
              "parameters": [
                {
                  "name": "valueInQuestion",
                  "flags": {},
                  "comment": "The number to test.",
                  "type": "number"
                },
                {
                  "name": "limitA",
                  "flags": {},
                  "comment": "First limit.",
                  "type": "number"
                },
                {
                  "name": "limitB",
                  "flags": {},
                  "comment": "Second limit.",
                  "type": "number"
                },
                {
                  "name": "exclusive",
                  "flags": {},
                  "comment": "Flag to exclude equaling the limits.",
                  "type": "boolean"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 113,
              "character": 29
            }
          ]
        },
        "isBetweenArcAngles": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isBetweenArcAngles",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check if a given angle is between an arc's start and end angles.",
                "returns": "Boolean true if angle is between (or equal to) the arc's start and end angles.\n"
              },
              "parameters": [
                {
                  "name": "angleInQuestion",
                  "flags": {},
                  "comment": "The angle to test.",
                  "type": "number"
                },
                {
                  "name": "arc",
                  "flags": {},
                  "comment": "Arc to test against.",
                  "type": "IPathArc"
                },
                {
                  "name": "exclusive",
                  "flags": {},
                  "comment": "Flag to exclude equaling the start or end angles.",
                  "type": "boolean"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 129,
              "character": 38
            }
          ]
        },
        "isBetweenPoints": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isBetweenPoints",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check if a given point is between a line's end points.",
                "returns": "Boolean true if point is between (or equal to) the line's origin and end points.\n"
              },
              "parameters": [
                {
                  "name": "pointInQuestion",
                  "flags": {},
                  "comment": "The point to test.",
                  "type": "IPoint"
                },
                {
                  "name": "line",
                  "flags": {},
                  "comment": "Line to test against.",
                  "type": "IPathLine"
                },
                {
                  "name": "exclusive",
                  "flags": {},
                  "comment": "Flag to exclude equaling the origin or end points.",
                  "type": "boolean"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 149,
              "character": 35
            }
          ]
        },
        "isBezierSeedLinear": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isBezierSeedLinear",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check if a given bezier seed has all points on the same slope.",
                "returns": "Boolean true if bezier seed has control points on the line slope and between the line endpoints.\n"
              },
              "parameters": [
                {
                  "name": "seed",
                  "flags": {},
                  "comment": "The bezier seed to test.",
                  "type": "IPathBezierSeed"
                },
                {
                  "name": "exclusive",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional boolean to test only within the boundary of the endpoints.",
                  "type": "boolean"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 171,
              "character": 38
            }
          ]
        },
        "isChainClockwise": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isChainClockwise",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check for flow of paths in a chain being clockwise or not.",
                "returns": "Boolean true if paths in the chain flow clockwise.\n"
              },
              "parameters": [
                {
                  "name": "chainContext",
                  "flags": {},
                  "comment": "The chain to test.",
                  "type": "IChain"
                },
                {
                  "name": "out_result",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional output object, if provided, will be populated with convex hull results."
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 205,
              "character": 36
            }
          ]
        },
        "isLineOverlapping": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isLineOverlapping",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check for line overlapping another line.",
                "returns": "Boolean true if lineA is overlapped with lineB.\n"
              },
              "parameters": [
                {
                  "name": "lineA",
                  "flags": {},
                  "comment": "The line to test.",
                  "type": "IPathLine"
                },
                {
                  "name": "lineB",
                  "flags": {},
                  "comment": "The line to check for overlap.",
                  "type": "IPathLine"
                },
                {
                  "name": "excludeTangents",
                  "flags": {},
                  "comment": "Boolean to exclude exact endpoints and only look for deep overlaps.",
                  "type": "boolean"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 272,
              "character": 37
            }
          ]
        },
        "isMeasurementOverlapping": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isMeasurementOverlapping",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check for measurement overlapping another measurement.",
                "returns": "Boolean true if measureA is overlapped with measureB.\n"
              },
              "parameters": [
                {
                  "name": "measureA",
                  "flags": {},
                  "comment": "The measurement to test.",
                  "type": "IMeasure"
                },
                {
                  "name": "measureB",
                  "flags": {},
                  "comment": "The measurement to check for overlap.",
                  "type": "IMeasure"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 294,
              "character": 44
            }
          ]
        },
        "isPointArrayClockwise": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPointArrayClockwise",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check for array of points being clockwise or not.",
                "returns": "Boolean true if points flow clockwise.\n"
              },
              "parameters": [
                {
                  "name": "points",
                  "flags": {},
                  "comment": "The array of points to test."
                },
                {
                  "name": "out_result",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional output object, if provided, will be populated with convex hull results."
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 224,
              "character": 41
            }
          ]
        },
        "isPointInsideModel": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isPointInsideModel",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check to see if a point is inside of a model.",
                "returns": "Boolean true if the path is inside of the modelContext.\n"
              },
              "parameters": [
                {
                  "name": "pointToCheck",
                  "flags": {},
                  "comment": "The point to check.",
                  "type": "IPoint"
                },
                {
                  "name": "modelContext",
                  "flags": {},
                  "comment": "The model to check against.",
                  "type": "IModel"
                },
                {
                  "name": "options",
                  "flags": {},
                  "comment": "Optional IMeasurePointInsideOptions object.",
                  "type": "IMeasurePointInsideOptions",
                  "defaultValue": " {}"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 866,
              "character": 38
            }
          ]
        },
        "lineSlope": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "lineSlope",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Gets the slope of a line."
              },
              "parameters": [
                {
                  "name": "line",
                  "flags": {},
                  "type": "IPathLine"
                }
              ],
              "type": "ISlope"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 305,
              "character": 29
            }
          ]
        },
        "modelExtents": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "modelExtents",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Measures the smallest rectangle which contains a model.",
                "returns": "object with low and high points.\n"
              },
              "parameters": [
                {
                  "name": "modelToMeasure",
                  "flags": {},
                  "comment": "The model to measure.",
                  "type": "IModel"
                },
                {
                  "name": "atlas",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional atlas to save measurements.",
                  "type": "Atlas"
                }
              ],
              "type": "IMeasureWithCenter"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 494,
              "character": 32
            }
          ]
        },
        "modelPathLength": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "modelPathLength",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Measures the length of all paths in a model.",
                "returns": "Length of all paths in the model.\n"
              },
              "parameters": [
                {
                  "name": "modelToMeasure",
                  "flags": {},
                  "comment": "The model containing paths to measure.",
                  "type": "IModel"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 465,
              "character": 35
            }
          ]
        },
        "pathExtents": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "pathExtents",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Calculates the smallest rectangle which contains a path.",
                "returns": "object with low and high points.\n"
              },
              "parameters": [
                {
                  "name": "pathToMeasure",
                  "flags": {},
                  "comment": "The path to measure.",
                  "type": "IPath"
                },
                {
                  "name": "addOffset",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IPoint"
                }
              ],
              "type": "IMeasure"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 398,
              "character": 31
            }
          ]
        },
        "pathLength": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "pathLength",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Measures the length of a path.",
                "returns": "Length of the path.\n"
              },
              "parameters": [
                {
                  "name": "pathToMeasure",
                  "flags": {},
                  "comment": "The path to measure.",
                  "type": "IPath"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 447,
              "character": 30
            }
          ]
        },
        "pointDistance": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "pointDistance",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Calculates the distance between two points.",
                "returns": "Distance between points.\n"
              },
              "parameters": [
                {
                  "name": "a",
                  "flags": {},
                  "comment": "First point.",
                  "type": "IPoint"
                },
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second point.",
                  "type": "IPoint"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 334,
              "character": 33
            }
          ]
        }
      },
      "Class": {
        "Atlas": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "A list of maps of measurements.",
            "tags": [
              {
                "tag": "param",
                "text": "The model to measure.",
                "param": "modelToMeasure"
              },
              {
                "tag": "param",
                "text": "Optional atlas to save measurements.",
                "param": "atlas"
              },
              {
                "tag": "returns",
                "text": "object with low and high points.\n"
              }
            ]
          },
          "sources": [
            {
              "fileName": "core/measure.ts",
              "line": 568,
              "character": 22
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Atlas",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Constructor."
                },
                "parameters": [
                  {
                    "name": "modelContext",
                    "flags": {},
                    "type": "IModel"
                  }
                ],
                "type": "Atlas"
              }
            ]
          },
          "Property": {
            "modelContext": {
              "flags": {
                "isConstructorProperty": true,
                "isExported": true,
                "isPublic": true
              },
              "comment": {
                "shortText": "The model to measure.\n"
              },
              "sources": [
                {
                  "fileName": "core/measure.ts",
                  "line": 589,
                  "character": 39
                }
              ],
              "type": {
                "type": "reference",
                "name": "IModel"
              }
            },
            "modelMap": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "comment": {
                "shortText": "Map of model measurements, mapped by routeKey."
              },
              "sources": [
                {
                  "fileName": "core/measure.ts",
                  "line": 578,
                  "character": 23
                }
              ],
              "type": {
                "type": "reference",
                "name": "IMeasureMap"
              }
            },
            "modelsMeasured": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "comment": {
                "shortText": "Flag that models have been measured."
              },
              "sources": [
                {
                  "fileName": "core/measure.ts",
                  "line": 573,
                  "character": 29
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "defaultValue": "false"
            },
            "pathMap": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "comment": {
                "shortText": "Map of path measurements, mapped by routeKey."
              },
              "sources": [
                {
                  "fileName": "core/measure.ts",
                  "line": 583,
                  "character": 22
                }
              ],
              "type": {
                "type": "reference",
                "name": "IMeasureMap"
              }
            }
          },
          "Method": {
            "measureModels": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "signatures": [
                {
                  "name": "measureModels",
                  "kindString": "Call signature",
                  "type": "void"
                }
              ],
              "sources": [
                {
                  "fileName": "core/measure.ts",
                  "line": 592,
                  "character": 28
                }
              ]
            }
          }
        }
      }
    },
    "importer": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/svg.ts",
          "line": 940,
          "character": 26
        }
      ],
      "Function": {
        "parseNumericList": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "parseNumericList",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a numeric array from a string of numbers. The numbers may be delimited by anything non-numeric.",
                "text": "Example:\n```\nvar n = makerjs.importer.parseNumericList('5, 10, 15.20 25-30-35 4e1 .5');\n```\n",
                "returns": "Array of numbers.\n"
              },
              "parameters": [
                {
                  "name": "s",
                  "flags": {},
                  "comment": "The string of numbers.",
                  "type": "string"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/importer.ts",
              "line": 14,
              "character": 36
            }
          ]
        },
        "fromSVGPathData": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "fromSVGPathData",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a model from SVG path data.",
                "returns": "An IModel object.\n"
              },
              "parameters": [
                {
                  "name": "pathData",
                  "flags": {},
                  "comment": "SVG path data.",
                  "type": "string"
                },
                {
                  "name": "options",
                  "flags": {},
                  "comment": "ISVGImportOptions object.",
                  "type": "ISVGImportOptions",
                  "defaultValue": " {}"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 972,
              "character": 35
            }
          ]
        }
      },
      "Interface": {
        "ISVGImportOptions": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "SVG importing options."
          },
          "sources": [
            {
              "fileName": "core/svg.ts",
              "line": 956,
              "character": 38
            }
          ],
          "Property": {
            "bezierAccuracy": {
              "flags": {
                "isExported": true,
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional accuracy of Bezier curves and elliptic paths."
              },
              "sources": [
                {
                  "fileName": "core/svg.ts",
                  "line": 961,
                  "character": 22
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          }
        }
      }
    },
    "kit": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/kit.ts",
          "line": 1,
          "character": 21
        }
      ],
      "Function": {
        "construct": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "construct",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Helper function to use the JavaScript \"apply\" function in conjunction with the \"new\" keyword.",
                "returns": "A new instance of the class, which implements the IModel interface.\n"
              },
              "parameters": [
                {
                  "name": "ctor",
                  "flags": {},
                  "comment": "The constructor for the class which is an IKit.",
                  "type": "IKit"
                },
                {
                  "name": "args",
                  "flags": {},
                  "comment": "The array of parameters passed to the constructor.",
                  "type": "any"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/kit.ts",
              "line": 11,
              "character": 29
            }
          ]
        },
        "getParameterValues": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "getParameterValues",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Extract just the initial sample values from a kit.",
                "returns": "Array of the inital sample values provided in the metaParameters array.\n"
              },
              "parameters": [
                {
                  "name": "ctor",
                  "flags": {},
                  "comment": "The constructor for the class which is an IKit.",
                  "type": "IKit"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/kit.ts",
              "line": 25,
              "character": 38
            }
          ]
        }
      }
    },
    "layout": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/layout.ts",
          "line": 1,
          "character": 24
        }
      ],
      "Function": {
        "childrenOnChain": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "childrenOnChain",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Layout the children of a model along a chain.\nThe x-position of each child will be projected onto the chain so that the proportion between children is maintained.\nThe projected positions of the children will become an array of points that approximate the chain.\nEach child will be rotated such that it will be mitered according to the vertex angles formed by this series of points.",
                "returns": "The parentModel, for cascading.\n"
              },
              "parameters": [
                {
                  "name": "parentModel",
                  "flags": {},
                  "comment": "The model containing children to lay out.",
                  "type": "IModel"
                },
                {
                  "name": "onChain",
                  "flags": {},
                  "comment": "The chain on which to lay out.",
                  "type": "IChain"
                },
                {
                  "name": "baseline",
                  "flags": {},
                  "comment": "Numeric percentage value of vertical displacement from the chain. Default is zero.",
                  "type": "number",
                  "defaultValue": "0"
                },
                {
                  "name": "reversed",
                  "flags": {},
                  "comment": "Flag to travel along the chain in reverse. Default is false.",
                  "type": "boolean",
                  "defaultValue": "false"
                },
                {
                  "name": "contain",
                  "flags": {},
                  "comment": "Flag to contain the children layout within the length of the chain. Default is false.",
                  "type": "boolean",
                  "defaultValue": "false"
                },
                {
                  "name": "rotated",
                  "flags": {},
                  "type": "boolean",
                  "defaultValue": "true"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/layout.ts",
              "line": 183,
              "character": 35
            }
          ]
        },
        "childrenOnPath": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "childrenOnPath",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Layout the children of a model along a path.\nThe x-position of each child will be projected onto the path so that the proportion between children is maintained.\nEach child will be rotated such that it will be perpendicular to the path at the child's x-center.",
                "returns": "The parentModel, for cascading.\n"
              },
              "parameters": [
                {
                  "name": "parentModel",
                  "flags": {},
                  "comment": "The model containing children to lay out.",
                  "type": "IModel"
                },
                {
                  "name": "onPath",
                  "flags": {},
                  "comment": "The path on which to lay out.",
                  "type": "IPath"
                },
                {
                  "name": "baseline",
                  "flags": {},
                  "comment": "Numeric percentage value of vertical displacement from the path. Default is zero.",
                  "type": "number",
                  "defaultValue": "0"
                },
                {
                  "name": "reversed",
                  "flags": {},
                  "comment": "Flag to travel along the path in reverse. Default is false.",
                  "type": "boolean",
                  "defaultValue": "false"
                },
                {
                  "name": "contain",
                  "flags": {},
                  "comment": "Flag to contain the children layout within the length of the path. Default is false.",
                  "type": "boolean",
                  "defaultValue": "false"
                },
                {
                  "name": "rotate",
                  "flags": {},
                  "comment": "Flag to rotate the child to perpendicular. Default is true.",
                  "type": "boolean",
                  "defaultValue": "true"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/layout.ts",
              "line": 119,
              "character": 34
            }
          ]
        },
        "cloneToBrick": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "cloneToBrick",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Layout clones in a brick format. Alternating rows will have an additional item in each row.",
                "text": "Examples:\n```\n//Brick wall\nvar m = require('makerjs');\nvar brick = new m.models.RoundRectangle(50, 30, 4);\nvar wall = m.layout.cloneToBrick(brick, 8, 6, 3);\ndocument.write(m.exporter.toSVG(wall));\n```\n\n```\n//Fish scales\nvar m = require('makerjs');\nvar arc = new m.paths.Arc([0, 0], 50, 20, 160);\nvar scales = m.layout.cloneToBrick(arc, 8, 20);\ndocument.write(m.exporter.toSVG(scales));\n```\n",
                "returns": "A new model with clones in a brick layout.\n"
              },
              "parameters": [
                {
                  "name": "itemToClone",
                  "flags": {}
                },
                {
                  "name": "xCount",
                  "flags": {},
                  "comment": "Number of columns in the brick grid.",
                  "type": "number"
                },
                {
                  "name": "yCount",
                  "flags": {},
                  "comment": "Number of rows in the brick grid.",
                  "type": "number"
                },
                {
                  "name": "margin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional numeric distance between each clone. Can also be a 2 dimensional array of numbers, to specify distances in x and y dimensions."
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/layout.ts",
              "line": 445,
              "character": 32
            }
          ]
        },
        "cloneToColumn": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "cloneToColumn",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Layout clones in a column format.",
                "text": "Example:\n```\n//Grooves for a finger joint\nvar m = require('makerjs');\n\nvar dogbone = new m.models.Dogbone(50, 20, 2, -1, false);\n\nvar grooves = m.layout.cloneToColumn(dogbone, 5, 20);\n\ndocument.write(m.exporter.toSVG(grooves));\n```\n",
                "returns": "A new model with clones in a column.\n"
              },
              "parameters": [
                {
                  "name": "itemToClone",
                  "flags": {}
                },
                {
                  "name": "count",
                  "flags": {},
                  "comment": "Number of clones in the column.",
                  "type": "number"
                },
                {
                  "name": "margin",
                  "flags": {},
                  "comment": "Optional distance between each clone.",
                  "type": "number",
                  "defaultValue": "0"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/layout.ts",
              "line": 321,
              "character": 33
            }
          ]
        },
        "cloneToGrid": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "cloneToGrid",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Layout clones in a grid format.",
                "text": "Example:\n```\n//Grid of squares\nvar m = require('makerjs');\nvar square = new m.models.Square(43);\nvar grid = m.layout.cloneToGrid(square, 5, 5, 7);\ndocument.write(m.exporter.toSVG(grid));\n```\n",
                "returns": "A new model with clones in a grid layout.\n"
              },
              "parameters": [
                {
                  "name": "itemToClone",
                  "flags": {}
                },
                {
                  "name": "xCount",
                  "flags": {},
                  "comment": "Number of columns in the grid.",
                  "type": "number"
                },
                {
                  "name": "yCount",
                  "flags": {},
                  "comment": "Number of rows in the grid.",
                  "type": "number"
                },
                {
                  "name": "margin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional numeric distance between each clone. Can also be a 2 dimensional array of numbers, to specify distances in x and y dimensions."
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/layout.ts",
              "line": 372,
              "character": 31
            }
          ]
        },
        "cloneToHoneycomb": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "cloneToHoneycomb",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Layout clones in a honeycomb format. Alternating rows will have an additional item in each row.",
                "text": "Examples:\n```\n//Honeycomb\nvar m = require('makerjs');\nvar hex = new m.models.Polygon(6, 50, 30);\nvar pattern = m.layout.cloneToHoneycomb(hex, 8, 9, 10);\ndocument.write(m.exporter.toSVG(pattern));\n```\n",
                "returns": "A new model with clones in a honeycomb layout.\n"
              },
              "parameters": [
                {
                  "name": "itemToClone",
                  "flags": {}
                },
                {
                  "name": "xCount",
                  "flags": {},
                  "comment": "Number of columns in the honeycomb grid.",
                  "type": "number"
                },
                {
                  "name": "yCount",
                  "flags": {},
                  "comment": "Number of rows in the honeycomb grid.",
                  "type": "number"
                },
                {
                  "name": "margin",
                  "flags": {},
                  "comment": "Optional distance between each clone.",
                  "type": "number",
                  "defaultValue": "0"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/layout.ts",
              "line": 477,
              "character": 36
            }
          ]
        },
        "cloneToRadial": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "cloneToRadial",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Layout clones in a radial format.",
                "text": "Example:\n```\n//daisy petals\nvar makerjs = require('makerjs');\n\nvar belt = new makerjs.models.Belt(5, 50, 20);\n\nmakerjs.model.move(belt, [25, 0]);\n\nvar petals = makerjs.layout.cloneToRadial(belt, 8, 45);\n\ndocument.write(makerjs.exporter.toSVG(petals));\n```\n",
                "returns": "A new model with clones in a radial format.\n"
              },
              "parameters": [
                {
                  "name": "itemToClone",
                  "flags": {}
                },
                {
                  "name": "count",
                  "flags": {},
                  "comment": "Number of clones in the radial result.",
                  "type": "number"
                },
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "angle of rotation between clones..",
                  "type": "number"
                },
                {
                  "name": "rotationOrigin",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IPoint"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/layout.ts",
              "line": 250,
              "character": 33
            }
          ]
        },
        "cloneToRow": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "cloneToRow",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Layout clones in a row format.",
                "text": "Example:\n```\n//Tongue and grooves for a box joint\nvar m = require('makerjs');\nvar tongueWidth = 60;\nvar grooveWidth = 50;\nvar grooveDepth = 30;\nvar groove = new m.models.Dogbone(grooveWidth, grooveDepth, 5, 0, true);\n\ngroove.paths['leftTongue'] = new m.paths.Line([-tongueWidth / 2, 0], [0, 0]);\ngroove.paths['rightTongue'] = new m.paths.Line([grooveWidth, 0], [grooveWidth + tongueWidth / 2, 0]);\n\nvar tongueAndGrooves = m.layout.cloneToRow(groove, 3);\n\ndocument.write(m.exporter.toSVG(tongueAndGrooves));\n```\n",
                "returns": "A new model with clones in a row.\n"
              },
              "parameters": [
                {
                  "name": "itemToClone",
                  "flags": {}
                },
                {
                  "name": "count",
                  "flags": {},
                  "comment": "Number of clones in the row.",
                  "type": "number"
                },
                {
                  "name": "margin",
                  "flags": {},
                  "comment": "Optional distance between each clone.",
                  "type": "number",
                  "defaultValue": "0"
                }
              ],
              "type": "IModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/layout.ts",
              "line": 350,
              "character": 30
            }
          ]
        }
      }
    },
    "paths": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/paths.ts",
          "line": 1,
          "character": 23
        }
      ],
      "Class": {
        "Arc": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Class for arc path."
          },
          "sources": [
            {
              "fileName": "core/paths.ts",
              "line": 16,
              "character": 20
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IPathArc"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Arc",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for arc path, created from origin point, radius, start angle, and end angle."
                },
                "parameters": [
                  {
                    "name": "origin",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "radius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "startAngle",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "endAngle",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "Arc"
              },
              {
                "name": "new Arc",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for arc path, created from 2 points, radius, large Arc flag, and clockwise flag."
                },
                "parameters": [
                  {
                    "name": "pointA",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "pointB",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "radius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "largeArc",
                    "flags": {},
                    "type": "boolean"
                  },
                  {
                    "name": "clockwise",
                    "flags": {},
                    "type": "boolean"
                  }
                ],
                "type": "Arc"
              },
              {
                "name": "new Arc",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for arc path, created from 2 points and optional boolean flag indicating clockwise."
                },
                "parameters": [
                  {
                    "name": "pointA",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "pointB",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "clockwise",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "boolean"
                  }
                ],
                "type": "Arc"
              },
              {
                "name": "new Arc",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for arc path, created from 3 points."
                },
                "parameters": [
                  {
                    "name": "pointA",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "pointB",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "pointC",
                    "flags": {},
                    "type": "IPoint"
                  }
                ],
                "type": "Arc"
              }
            ]
          },
          "Property": {
            "endAngle": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 20,
                  "character": 23
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathArc.endAngle"
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 17,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathArc.origin"
              }
            },
            "radius": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 18,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathArc.radius"
              }
            },
            "startAngle": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 19,
                  "character": 25
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathArc.startAngle"
              }
            },
            "type": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 21,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathArc.type"
              }
            }
          }
        },
        "Chord": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Class for chord, which is simply a line path that connects the endpoints of an arc.",
            "tags": [
              {
                "tag": "param",
                "text": "Arc to use as the basic for the chord.\n",
                "param": "arc"
              }
            ]
          },
          "sources": [
            {
              "fileName": "core/paths.ts",
              "line": 344,
              "character": 22
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IPathLine"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Chord",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "arc",
                    "flags": {},
                    "type": "IPathArc"
                  }
                ],
                "type": "Chord"
              }
            ]
          },
          "Property": {
            "end": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 347,
                  "character": 18
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.end"
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 346,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.origin"
              }
            },
            "type": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 345,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.type"
              }
            }
          }
        },
        "Circle": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Class for circle path."
          },
          "sources": [
            {
              "fileName": "core/paths.ts",
              "line": 184,
              "character": 23
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IPathCircle"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Circle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for circle path, created from radius. Origin will be [0, 0].",
                  "text": "Example:\n```\nvar c = new makerjs.paths.Circle(7);\n```\n"
                },
                "parameters": [
                  {
                    "name": "radius",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "Circle"
              },
              {
                "name": "new Circle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for circle path, created from origin point and radius.",
                  "text": "Example:\n```\nvar c = new makerjs.paths.Circle([10, 10], 7);\n```\n"
                },
                "parameters": [
                  {
                    "name": "origin",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "radius",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "Circle"
              },
              {
                "name": "new Circle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for circle path, created from 2 points.",
                  "text": "Example:\n```\nvar c = new makerjs.paths.Circle([5, 15], [25, 15]);\n```\n"
                },
                "parameters": [
                  {
                    "name": "pointA",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "pointB",
                    "flags": {},
                    "type": "IPoint"
                  }
                ],
                "type": "Circle"
              },
              {
                "name": "new Circle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for circle path, created from 3 points.",
                  "text": "Example:\n```\nvar c = new makerjs.paths.Circle([0, 0], [0, 10], [20, 0]);\n```\n"
                },
                "parameters": [
                  {
                    "name": "pointA",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "pointB",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "pointC",
                    "flags": {},
                    "type": "IPoint"
                  }
                ],
                "type": "Circle"
              }
            ]
          },
          "Property": {
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 186,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathCircle.origin"
              }
            },
            "radius": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 187,
                  "character": 21
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathCircle.radius"
              }
            },
            "type": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 185,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathCircle.type"
              }
            }
          }
        },
        "Line": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Class for line path."
          },
          "sources": [
            {
              "fileName": "core/paths.ts",
              "line": 300,
              "character": 21
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IPathLine"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Line",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for line path, constructed from array of 2 points."
                },
                "parameters": [
                  {
                    "name": "points",
                    "flags": {}
                  }
                ],
                "type": "Line"
              },
              {
                "name": "new Line",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for line path, constructed from 2 points."
                },
                "parameters": [
                  {
                    "name": "origin",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "end",
                    "flags": {},
                    "type": "IPoint"
                  }
                ],
                "type": "Line"
              }
            ]
          },
          "Property": {
            "end": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 303,
                  "character": 18
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.end"
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 302,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.origin"
              }
            },
            "type": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 301,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.type"
              }
            }
          }
        },
        "Parallel": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Class for a parallel line path.",
            "tags": [
              {
                "tag": "param",
                "text": "A line to be parallel to.",
                "param": "toLine"
              },
              {
                "tag": "param",
                "text": "Distance between parallel and original line.",
                "param": "distance"
              },
              {
                "tag": "param",
                "text": "Any point to determine which side of the line to place the parallel.\n",
                "param": "nearPoint"
              }
            ]
          },
          "sources": [
            {
              "fileName": "core/paths.ts",
              "line": 365,
              "character": 25
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IPathLine"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Parallel",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "toLine",
                    "flags": {},
                    "type": "IPathLine"
                  },
                  {
                    "name": "distance",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "nearPoint",
                    "flags": {},
                    "type": "IPoint"
                  }
                ],
                "type": "Parallel"
              }
            ]
          },
          "Property": {
            "end": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 368,
                  "character": 18
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.end"
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 367,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.origin"
              }
            },
            "type": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "core/paths.ts",
                  "line": 366,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IPathLine.type"
              }
            }
          }
        }
      }
    },
    "point": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/point.ts",
          "line": 1,
          "character": 23
        }
      ],
      "Function": {
        "add": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "add",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add two points together and return the result as a new point object.",
                "returns": "A new point object.\n"
              },
              "parameters": [
                {
                  "name": "a",
                  "flags": {},
                  "comment": "First point.",
                  "type": "IPoint"
                },
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second point.",
                  "type": "IPoint"
                },
                {
                  "name": "subtract",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional boolean to subtract instead of add.",
                  "type": "boolean"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 11,
              "character": 23
            }
          ]
        },
        "average": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "average",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get the average of two points.",
                "returns": "New point object which is the average of a and b.\n"
              },
              "parameters": [
                {
                  "name": "a",
                  "flags": {},
                  "comment": "First point.",
                  "type": "IPoint"
                },
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second point.",
                  "type": "IPoint"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 33,
              "character": 27
            }
          ]
        },
        "clone": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "clone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Clone a point into a new point.",
                "returns": "A new point with same values as the original.\n"
              },
              "parameters": [
                {
                  "name": "pointToClone",
                  "flags": {},
                  "comment": "The point to clone.",
                  "type": "IPoint"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 46,
              "character": 25
            }
          ]
        },
        "closest": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "closest",
              "kindString": "Call signature",
              "comment": {
                "shortText": "From an array of points, find the closest point to a given reference point.",
                "returns": "The first closest point from the pointOptions.\n"
              },
              "parameters": [
                {
                  "name": "referencePoint",
                  "flags": {},
                  "comment": "The reference point.",
                  "type": "IPoint"
                },
                {
                  "name": "pointOptions",
                  "flags": {},
                  "comment": "Array of points to choose from."
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 58,
              "character": 27
            }
          ]
        },
        "distort": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "distort",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Distort a point's coordinates.",
                "returns": "A new point.\n"
              },
              "parameters": [
                {
                  "name": "pointToDistort",
                  "flags": {},
                  "comment": "The point to distort.",
                  "type": "IPoint"
                },
                {
                  "name": "scaleX",
                  "flags": {},
                  "comment": "The amount of x scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleY",
                  "flags": {},
                  "comment": "The amount of y scaling.",
                  "type": "number"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 334,
              "character": 27
            }
          ]
        },
        "fromAngleOnCircle": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "fromAngleOnCircle",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get a point on a circle or arc path, at a given angle.",
                "returns": "A new point object.\n"
              },
              "parameters": [
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "The angle at which you want to find the point, in degrees.",
                  "type": "number"
                },
                {
                  "name": "circle",
                  "flags": {},
                  "comment": "A circle or arc.",
                  "type": "IPathCircle"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 107,
              "character": 37
            }
          ]
        },
        "fromArc": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "fromArc",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get the two end points of an arc path.",
                "returns": "Array with 2 elements: [0] is the point object corresponding to the start angle, [1] is the point object corresponding to the end angle.\n"
              },
              "parameters": [
                {
                  "name": "arc",
                  "flags": {},
                  "comment": "The arc path object.",
                  "type": "IPathArc"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 117,
              "character": 27
            }
          ]
        },
        "fromPathEnds": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "fromPathEnds",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get the two end points of a path.",
                "returns": "Array with 2 elements: [0] is the point object corresponding to the origin, [1] is the point object corresponding to the end.\n"
              },
              "parameters": [
                {
                  "name": "pathContext",
                  "flags": {},
                  "comment": "The path object.",
                  "type": "IPath"
                },
                {
                  "name": "pathOffset",
                  "flags": {
                    "isOptional": true
                  },
                  "type": "IPoint"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 142,
              "character": 32
            }
          ]
        },
        "fromPolar": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "fromPolar",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get a point from its polar coordinates.",
                "returns": "A new point object.\n"
              },
              "parameters": [
                {
                  "name": "angleInRadians",
                  "flags": {},
                  "comment": "The angle of the polar coordinate, in radians.",
                  "type": "number"
                },
                {
                  "name": "radius",
                  "flags": {},
                  "comment": "The radius of the polar coordinate.",
                  "type": "number"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 94,
              "character": 29
            }
          ]
        },
        "fromSlopeIntersection": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "fromSlopeIntersection",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Calculates the intersection of slopes of two lines.",
                "returns": "point of intersection of the two slopes, or null if the slopes did not intersect.\n"
              },
              "parameters": [
                {
                  "name": "lineA",
                  "flags": {},
                  "comment": "First line to use for slope.",
                  "type": "IPathLine"
                },
                {
                  "name": "lineB",
                  "flags": {},
                  "comment": "Second line to use for slope.",
                  "type": "IPathLine"
                },
                {
                  "name": "options",
                  "flags": {},
                  "comment": "Optional IPathIntersectionOptions.",
                  "type": "IPathIntersectionBaseOptions",
                  "defaultValue": " {}"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 175,
              "character": 41
            }
          ]
        },
        "middle": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "middle",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get the middle point of a path.",
                "returns": "Point on the path, in the middle of the path.\n"
              },
              "parameters": [
                {
                  "name": "pathContext",
                  "flags": {},
                  "comment": "The path object.",
                  "type": "IPath"
                },
                {
                  "name": "ratio",
                  "flags": {},
                  "comment": "Optional ratio (between 0 and 1) of point along the path. Default is .5 for middle.",
                  "type": "number",
                  "defaultValue": "0.5"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 251,
              "character": 26
            }
          ]
        },
        "mirror": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "mirror",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a clone of a point, mirrored on either or both x and y axes.",
                "returns": "Mirrored point.\n"
              },
              "parameters": [
                {
                  "name": "pointToMirror",
                  "flags": {},
                  "comment": "The point to mirror.",
                  "type": "IPoint"
                },
                {
                  "name": "mirrorX",
                  "flags": {},
                  "comment": "Boolean to mirror on the x axis.",
                  "type": "boolean"
                },
                {
                  "name": "mirrorY",
                  "flags": {},
                  "comment": "Boolean to mirror on the y axis.",
                  "type": "boolean"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 270,
              "character": 26
            }
          ]
        },
        "rotate": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "rotate",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Rotate a point.",
                "returns": "A new point.\n"
              },
              "parameters": [
                {
                  "name": "pointToRotate",
                  "flags": {},
                  "comment": "The point to rotate.",
                  "type": "IPoint"
                },
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "The amount of rotation, in degrees.",
                  "type": "number"
                },
                {
                  "name": "rotationOrigin",
                  "flags": {},
                  "comment": "The center point of rotation.",
                  "type": "IPoint",
                  "defaultValue": " [0, 0]"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 303,
              "character": 26
            }
          ]
        },
        "rounded": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "rounded",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Round the values of a point.",
                "returns": "A new point with the values rounded.\n"
              },
              "parameters": [
                {
                  "name": "pointContext",
                  "flags": {},
                  "comment": "The point to serialize.",
                  "type": "IPoint"
                },
                {
                  "name": "accuracy",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional exemplar number of decimal places.",
                  "type": "number"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 291,
              "character": 27
            }
          ]
        },
        "scale": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "scale",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Scale a point's coordinates.",
                "returns": "A new point.\n"
              },
              "parameters": [
                {
                  "name": "pointToScale",
                  "flags": {},
                  "comment": "The point to scale.",
                  "type": "IPoint"
                },
                {
                  "name": "scaleValue",
                  "flags": {},
                  "comment": "The amount of scaling.",
                  "type": "number"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 318,
              "character": 25
            }
          ]
        },
        "subtract": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "subtract",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Subtract a point from another point, and return the result as a new point. Shortcut to Add(a, b, subtract = true).",
                "returns": "A new point object.\n"
              },
              "parameters": [
                {
                  "name": "a",
                  "flags": {},
                  "comment": "First point.",
                  "type": "IPoint"
                },
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second point.",
                  "type": "IPoint"
                }
              ],
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 345,
              "character": 28
            }
          ]
        },
        "zero": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "zero",
              "kindString": "Call signature",
              "comment": {
                "shortText": "A point at 0,0 coordinates.\nNOTE: It is important to call this as a method, with the empty parentheses.",
                "returns": "A new point.\n"
              },
              "type": "IPoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/point.ts",
              "line": 355,
              "character": 24
            }
          ]
        }
      }
    },
    "solvers": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/solvers.ts",
          "line": 1,
          "character": 25
        }
      ],
      "Function": {
        "circleTangentAngles": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "circleTangentAngles",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Solves for the angles of the tangent lines between 2 circles.",
                "returns": "Array of angles in degrees where 2 lines between the circles will be tangent to both circles.\n"
              },
              "parameters": [
                {
                  "name": "a",
                  "flags": {},
                  "comment": "First circle.",
                  "type": "IPathCircle"
                },
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second circle.",
                  "type": "IPathCircle"
                },
                {
                  "name": "inner",
                  "flags": {},
                  "comment": "Boolean to use inner tangents instead of outer tangents.",
                  "type": "boolean",
                  "defaultValue": "false"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/solvers.ts",
              "line": 63,
              "character": 39
            }
          ]
        },
        "equilateralAltitude": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "equilateralAltitude",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Solves for the altitude of an equilateral triangle when you know its side length.",
                "returns": "Altitude of the equilateral triangle.\n"
              },
              "parameters": [
                {
                  "name": "sideLength",
                  "flags": {},
                  "comment": "Length of a side of the equilateral triangle (all 3 sides are equal).",
                  "type": "number"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/solvers.ts",
              "line": 14,
              "character": 39
            }
          ]
        },
        "equilateralSide": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "equilateralSide",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Solves for the side length of an equilateral triangle when you know its altitude.",
                "returns": "Length of the side of the equilateral triangle (all 3 sides are equal).\n"
              },
              "parameters": [
                {
                  "name": "altitude",
                  "flags": {},
                  "comment": "Altitude of the equilateral triangle.",
                  "type": "number"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/solvers.ts",
              "line": 24,
              "character": 35
            }
          ]
        },
        "solveTriangleASA": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "solveTriangleASA",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Solves for the length of a side of a triangle when you know length of one side and 2 angles.",
                "returns": "Length of the side of the triangle which is opposite of the first angle parameter.\n"
              },
              "parameters": [
                {
                  "name": "oppositeAngleInDegrees",
                  "flags": {},
                  "comment": "Angle which is opposite of the side you are trying to find.",
                  "type": "number"
                },
                {
                  "name": "lengthOfSideBetweenAngles",
                  "flags": {},
                  "comment": "Length of one side of the triangle which is between the provided angles.",
                  "type": "number"
                },
                {
                  "name": "otherAngleInDegrees",
                  "flags": {},
                  "comment": "An other angle of the triangle.",
                  "type": "number"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/solvers.ts",
              "line": 48,
              "character": 36
            }
          ]
        },
        "solveTriangleSSS": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "solveTriangleSSS",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Solves for the angle of a triangle when you know lengths of 3 sides.",
                "returns": "Angle opposite of the side represented by the first parameter.\n"
              },
              "parameters": [
                {
                  "name": "lengthA",
                  "flags": {},
                  "comment": "Length of side of triangle, opposite of the angle you are trying to find.",
                  "type": "number"
                },
                {
                  "name": "lengthB",
                  "flags": {},
                  "comment": "Length of any other side of the triangle.",
                  "type": "number"
                },
                {
                  "name": "lengthC",
                  "flags": {},
                  "comment": "Length of the remaining side of the triangle.",
                  "type": "number"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/solvers.ts",
              "line": 36,
              "character": 36
            }
          ]
        }
      }
    },
    "units": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/units.ts",
          "line": 1,
          "character": 23
        }
      ],
      "Function": {
        "conversionScale": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "conversionScale",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get a conversion ratio between a source unit and a destination unit.",
                "returns": "Numeric ratio of the conversion.\n"
              },
              "parameters": [
                {
                  "name": "srcUnitType",
                  "flags": {},
                  "comment": "unitType converting from.",
                  "type": "string"
                },
                {
                  "name": "destUnitType",
                  "flags": {},
                  "comment": "unitType converting to.",
                  "type": "string"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/units.ts",
              "line": 58,
              "character": 35
            }
          ]
        },
        "isValidUnit": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "isValidUnit",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Check to see if unit type is a valid Maker.js unit.",
                "returns": "Boolean true if unit type is valid.\n"
              },
              "parameters": [
                {
                  "name": "tryUnit",
                  "flags": {},
                  "comment": "unit type to check.",
                  "type": "string"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/units.ts",
              "line": 86,
              "character": 31
            }
          ]
        }
      }
    },
    "models": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "models/Text.ts",
          "line": 1,
          "character": 24
        }
      ],
      "Class": {
        "Belt": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Belt.ts",
              "line": 3,
              "character": 21
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Belt",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "leftRadius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "distance",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "rightRadius",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "Belt"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Belt.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "BezierCurve": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/BezierCurve.ts",
              "line": 401,
              "character": 28
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new BezierCurve",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "points",
                    "flags": {}
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "BezierCurve"
              },
              {
                "name": "new BezierCurve",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "seed",
                    "flags": {},
                    "type": "IPathBezierSeed"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "BezierCurve"
              },
              {
                "name": "new BezierCurve",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "origin",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "control",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "end",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "BezierCurve"
              },
              {
                "name": "new BezierCurve",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "origin",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "controls",
                    "flags": {}
                  },
                  {
                    "name": "end",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "BezierCurve"
              },
              {
                "name": "new BezierCurve",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "origin",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "control1",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "control2",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "end",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "BezierCurve"
              }
            ]
          },
          "Property": {
            "accuracy": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 408,
                  "character": 23
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            "models": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 403,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IModelMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.models"
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 405,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.origin"
              }
            },
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 404,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            },
            "seed": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 407,
                  "character": 19
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathBezierSeed"
              }
            },
            "type": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 406,
                  "character": 19
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": " BezierCurve.typeName",
              "implementationOf": {
                "type": "reference",
                "name": "IModel.type"
              }
            },
            "typeName": {
              "flags": {
                "isStatic": true,
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 507,
                  "character": 30
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "defaultValue": "\"BezierCurve\""
            }
          },
          "Method": {
            "computeLength": {
              "flags": {
                "isStatic": true,
                "isExported": true,
                "isPublic": true
              },
              "signatures": [
                {
                  "name": "computeLength",
                  "kindString": "Call signature",
                  "parameters": [
                    {
                      "name": "seed",
                      "flags": {},
                      "type": "IPathBezierSeed"
                    }
                  ],
                  "type": "number"
                }
              ],
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 560,
                  "character": 35
                }
              ]
            },
            "computePoint": {
              "flags": {
                "isStatic": true,
                "isExported": true,
                "isPublic": true
              },
              "signatures": [
                {
                  "name": "computePoint",
                  "kindString": "Call signature",
                  "parameters": [
                    {
                      "name": "seed",
                      "flags": {},
                      "type": "IPathBezierSeed"
                    },
                    {
                      "name": "t",
                      "flags": {},
                      "type": "number"
                    }
                  ],
                  "type": "IPoint"
                }
              ],
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 565,
                  "character": 34
                }
              ]
            },
            "getBezierSeeds": {
              "flags": {
                "isStatic": true,
                "isExported": true,
                "isPublic": true
              },
              "signatures": [
                {
                  "name": "getBezierSeeds",
                  "kindString": "Call signature",
                  "parameters": [
                    {
                      "name": "curve",
                      "flags": {},
                      "type": "BezierCurve"
                    },
                    {
                      "name": "options",
                      "flags": {},
                      "type": "IFindChainsOptions",
                      "defaultValue": " {}"
                    }
                  ]
                }
              ],
              "sources": [
                {
                  "fileName": "models/BezierCurve.ts",
                  "line": 509,
                  "character": 36
                }
              ]
            }
          }
        },
        "BoltCircle": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/BoltCircle.ts",
              "line": 3,
              "character": 27
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new BoltCircle",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "boltRadius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "holeRadius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "boltCount",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "firstBoltAngleInDegrees",
                    "flags": {},
                    "type": "number",
                    "defaultValue": "0"
                  }
                ],
                "type": "BoltCircle"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BoltCircle.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "BoltRectangle": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/BoltRectangle.ts",
              "line": 3,
              "character": 30
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new BoltRectangle",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "width",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "height",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "holeRadius",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "BoltRectangle"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/BoltRectangle.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "ConnectTheDots": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/ConnectTheDots.ts",
              "line": 28,
              "character": 31
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new ConnectTheDots",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a model by connecting points designated in a string. The model will be 'closed' - i.e. the last point will connect to the first point.",
                  "text": "Example:\n```\nvar c = new makerjs.models.ConnectTheDots('-10 0 10 0 0 20'); // 3 coordinates to form a triangle\n```\n"
                },
                "parameters": [
                  {
                    "name": "numericList",
                    "flags": {},
                    "type": "string"
                  }
                ],
                "type": "ConnectTheDots"
              },
              {
                "name": "new ConnectTheDots",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a model by connecting points designated in a string. The model may be closed, or left open.",
                  "text": "Example:\n```\nvar c = new makerjs.models.ConnectTheDots(false, '-10 0 10 0 0 20'); // 3 coordinates to form a polyline\n```\n"
                },
                "parameters": [
                  {
                    "name": "isClosed",
                    "flags": {},
                    "type": "boolean"
                  },
                  {
                    "name": "numericList",
                    "flags": {},
                    "type": "string"
                  }
                ],
                "type": "ConnectTheDots"
              },
              {
                "name": "new ConnectTheDots",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a model by connecting points designated in a numeric array. The model will be 'closed' - i.e. the last point will connect to the first point.",
                  "text": "Example:\n```\nvar c = new makerjs.models.ConnectTheDots([-10, 0, 10, 0, 0, 20]); // 3 coordinates to form a triangle\n```\n"
                },
                "parameters": [
                  {
                    "name": "coords",
                    "flags": {}
                  }
                ],
                "type": "ConnectTheDots"
              },
              {
                "name": "new ConnectTheDots",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a model by connecting points designated in a numeric array. The model may be closed, or left open.",
                  "text": "Example:\n```\nvar c = new makerjs.models.ConnectTheDots(false, [-10, 0, 10, 0, 0, 20]); // 3 coordinates to form a polyline\n```\n"
                },
                "parameters": [
                  {
                    "name": "isClosed",
                    "flags": {},
                    "type": "boolean"
                  },
                  {
                    "name": "coords",
                    "flags": {}
                  }
                ],
                "type": "ConnectTheDots"
              },
              {
                "name": "new ConnectTheDots",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a model by connecting points designated in an array of points. The model may be closed, or left open.",
                  "text": "Example:\n```\nvar c = new makerjs.models.ConnectTheDots(false, [[-10, 0], [10, 0], [0, 20]]); // 3 coordinates left open\n```\n"
                },
                "parameters": [
                  {
                    "name": "isClosed",
                    "flags": {},
                    "type": "boolean"
                  },
                  {
                    "name": "points",
                    "flags": {}
                  }
                ],
                "type": "ConnectTheDots"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/ConnectTheDots.ts",
                  "line": 30,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Dogbone": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Dogbone.ts",
              "line": 3,
              "character": 24
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Dogbone",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a dogbone from width, height, corner radius, style, and bottomless flag.",
                  "text": "Example:\n```\nvar d = new makerjs.models.Dogbone(50, 100, 5);\n```\n"
                },
                "parameters": [
                  {
                    "name": "width",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "height",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "radius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "style",
                    "flags": {},
                    "type": "number",
                    "defaultValue": "0"
                  },
                  {
                    "name": "bottomless",
                    "flags": {},
                    "type": "boolean",
                    "defaultValue": "false"
                  }
                ],
                "type": "Dogbone"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Dogbone.ts",
                  "line": 4,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Dome": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Dome.ts",
              "line": 3,
              "character": 21
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Dome",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "width",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "height",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "radius",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  },
                  {
                    "name": "bottomless",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "boolean"
                  }
                ],
                "type": "Dome"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Dome.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Ellipse": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Ellipse.ts",
              "line": 57,
              "character": 24
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Ellipse",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for Ellipse created with 2 radii."
                },
                "parameters": [
                  {
                    "name": "radiusX",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "radiusY",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "Ellipse"
              },
              {
                "name": "new Ellipse",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for Ellipse created at a specific origin and 2 radii."
                },
                "parameters": [
                  {
                    "name": "origin",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "radiusX",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "radiusY",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "Ellipse"
              },
              {
                "name": "new Ellipse",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for Ellipse created at a specific x, y and 2 radii."
                },
                "parameters": [
                  {
                    "name": "cx",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "cy",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "rx",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "ry",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "Ellipse"
              }
            ]
          },
          "Property": {
            "models": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Ellipse.ts",
                  "line": 59,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IModelMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.models"
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Ellipse.ts",
                  "line": 60,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.origin"
              }
            }
          }
        },
        "EllipticArc": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Ellipse.ts",
              "line": 200,
              "character": 28
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new EllipticArc",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for Elliptic Arc created by distorting a circular arc."
                },
                "parameters": [
                  {
                    "name": "startAngle",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "endAngle",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "radiusX",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "radiusY",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "EllipticArc"
              },
              {
                "name": "new EllipticArc",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Class for Elliptic Arc created by distorting a circular arc."
                },
                "parameters": [
                  {
                    "name": "arc",
                    "flags": {},
                    "type": "IPathArc"
                  },
                  {
                    "name": "distortX",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "distortY",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "accuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "EllipticArc"
              }
            ]
          },
          "Property": {
            "models": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Ellipse.ts",
                  "line": 201,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IModelMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.models"
              }
            }
          }
        },
        "Holes": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Holes.ts",
              "line": 2,
              "character": 22
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Holes",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create an array of circles of the same radius from an array of center points.",
                  "text": "Example:\n```\n//Create some holes from an array of points\nvar makerjs = require('makerjs');\nvar model = new makerjs.models.Holes(10, [[0, 0],[50, 0],[25, 40]]);\nvar svg = makerjs.exporter.toSVG(model);\ndocument.write(svg);\n```\n"
                },
                "parameters": [
                  {
                    "name": "holeRadius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "points",
                    "flags": {}
                  },
                  {
                    "name": "ids",
                    "flags": {
                      "isOptional": true
                    }
                  }
                ],
                "type": "Holes"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Holes.ts",
                  "line": 4,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Oval": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Oval.ts",
              "line": 3,
              "character": 21
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Oval",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "width",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "height",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "Oval"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Oval.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "OvalArc": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/OvalArc.ts",
              "line": 3,
              "character": 24
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new OvalArc",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "startAngle",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "endAngle",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "sweepRadius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "slotRadius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "selfIntersect",
                    "flags": {},
                    "type": "boolean",
                    "defaultValue": "false"
                  },
                  {
                    "name": "isolateCaps",
                    "flags": {},
                    "type": "boolean",
                    "defaultValue": "false"
                  }
                ],
                "type": "OvalArc"
              }
            ]
          },
          "Property": {
            "models": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/OvalArc.ts",
                  "line": 6,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IModelMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.models"
              }
            },
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/OvalArc.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Polygon": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Polygon.ts",
              "line": 2,
              "character": 24
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Polygon",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "numberOfSides",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "radius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "firstCornerAngleInDegrees",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  },
                  {
                    "name": "circumscribed",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "boolean"
                  }
                ],
                "type": "Polygon"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Polygon.ts",
                  "line": 4,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          },
          "Method": {
            "circumscribedRadius": {
              "flags": {
                "isStatic": true,
                "isExported": true,
                "isPublic": true
              },
              "signatures": [
                {
                  "name": "circumscribedRadius",
                  "kindString": "Call signature",
                  "parameters": [
                    {
                      "name": "radius",
                      "flags": {},
                      "type": "number"
                    },
                    {
                      "name": "angleInRadians",
                      "flags": {},
                      "type": "number"
                    }
                  ],
                  "type": "number"
                }
              ],
              "sources": [
                {
                  "fileName": "models/Polygon.ts",
                  "line": 10,
                  "character": 41
                }
              ]
            },
            "getPoints": {
              "flags": {
                "isStatic": true,
                "isExported": true,
                "isPublic": true
              },
              "signatures": [
                {
                  "name": "getPoints",
                  "kindString": "Call signature",
                  "parameters": [
                    {
                      "name": "numberOfSides",
                      "flags": {},
                      "type": "number"
                    },
                    {
                      "name": "radius",
                      "flags": {},
                      "type": "number"
                    },
                    {
                      "name": "firstCornerAngleInDegrees",
                      "flags": {},
                      "type": "number",
                      "defaultValue": "0"
                    },
                    {
                      "name": "circumscribed",
                      "flags": {},
                      "type": "boolean",
                      "defaultValue": "false"
                    }
                  ]
                }
              ],
              "sources": [
                {
                  "fileName": "models/Polygon.ts",
                  "line": 14,
                  "character": 31
                }
              ]
            }
          }
        },
        "Rectangle": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Rectangle.ts",
              "line": 2,
              "character": 26
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Rectangle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a rectangle from width and height.",
                  "text": "Example:\n```\n//Create a rectangle from width and height\nvar makerjs = require('makerjs');\nvar model = new makerjs.models.Rectangle(50, 100);\nvar svg = makerjs.exporter.toSVG(model);\ndocument.write(svg);\n```\n"
                },
                "parameters": [
                  {
                    "name": "width",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "height",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "Rectangle"
              },
              {
                "name": "new Rectangle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a rectangle which will surround a model.",
                  "text": "Example:\n```\n//Create a rectangle which will surround a model\nvar makerjs = require('makerjs');\nvar e = new makerjs.models.Ellipse(17, 10); // draw an ellipse so we have something to surround.\nvar r = new makerjs.models.Rectangle(e, 3); // draws a rectangle surrounding the ellipse by 3 units.\nvar svg = makerjs.exporter.toSVG({ models: { e: e, r: r }});\ndocument.write(svg);\n```\n"
                },
                "parameters": [
                  {
                    "name": "modelToSurround",
                    "flags": {},
                    "type": "IModel"
                  },
                  {
                    "name": "margin",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "Rectangle"
              },
              {
                "name": "new Rectangle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a rectangle from a measurement.",
                  "text": "Example:\n```\n//Create a rectangle from a measurement.\nvar makerjs = require('makerjs');\nvar e = new makerjs.models.Ellipse(17, 10); // draw an ellipse so we have something to measure.\nvar m = makerjs.measure.modelExtents(e);    // measure the ellipse.\nvar r = new makerjs.models.Rectangle(m);    // draws a rectangle surrounding the ellipse.\nvar svg = makerjs.exporter.toSVG({ models: { e: e, r: r }});\ndocument.write(svg);\n```\n"
                },
                "parameters": [
                  {
                    "name": "measurement",
                    "flags": {},
                    "type": "IMeasure"
                  }
                ],
                "type": "Rectangle"
              }
            ]
          },
          "Property": {
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Rectangle.ts",
                  "line": 5,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.origin"
              }
            },
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Rectangle.ts",
                  "line": 4,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Ring": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Ring.ts",
              "line": 3,
              "character": 21
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Ring",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "outerRadius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "innerRadius",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  }
                ],
                "type": "Ring"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Ring.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "RoundRectangle": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/RoundRectangle.ts",
              "line": 3,
              "character": 31
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new RoundRectangle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a round rectangle from width, height, and corner radius.",
                  "text": "Example:\n```\nvar r = new makerjs.models.RoundRectangle(100, 50, 5);\n```\n"
                },
                "parameters": [
                  {
                    "name": "width",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "height",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "radius",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "RoundRectangle"
              },
              {
                "name": "new RoundRectangle",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Create a round rectangle which will surround a model.",
                  "text": "Example:\n```\nvar b = new makerjs.models.BoltRectangle(30, 20, 1); //draw a bolt rectangle so we have something to surround\nvar r = new makerjs.models.RoundRectangle(b, 2.5);   //surround it\n```\n"
                },
                "parameters": [
                  {
                    "name": "modelToSurround",
                    "flags": {},
                    "type": "IModel"
                  },
                  {
                    "name": "margin",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "RoundRectangle"
              }
            ]
          },
          "Property": {
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/RoundRectangle.ts",
                  "line": 4,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.origin"
              }
            },
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/RoundRectangle.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "SCurve": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/SCurve.ts",
              "line": 3,
              "character": 23
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new SCurve",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "width",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "height",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "SCurve"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/SCurve.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Slot": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Slot.ts",
              "line": 3,
              "character": 21
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Slot",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "origin",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "endPoint",
                    "flags": {},
                    "type": "IPoint"
                  },
                  {
                    "name": "radius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "isolateCaps",
                    "flags": {},
                    "type": "boolean",
                    "defaultValue": "false"
                  }
                ],
                "type": "Slot"
              }
            ]
          },
          "Property": {
            "models": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Slot.ts",
                  "line": 7,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IModelMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.models"
              }
            },
            "origin": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Slot.ts",
                  "line": 6,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPoint"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.origin"
              }
            },
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Slot.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Square": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Square.ts",
              "line": 2,
              "character": 23
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Square",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "side",
                    "flags": {},
                    "type": "number"
                  }
                ],
                "type": "Square"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Square.ts",
                  "line": 4,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          }
        },
        "Star": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Star.ts",
              "line": 3,
              "character": 21
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Star",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "numberOfPoints",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "outerRadius",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "innerRadius",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  },
                  {
                    "name": "skipPoints",
                    "flags": {},
                    "type": "number",
                    "defaultValue": "2"
                  }
                ],
                "type": "Star"
              }
            ]
          },
          "Property": {
            "paths": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Star.ts",
                  "line": 5,
                  "character": 20
                }
              ],
              "type": {
                "type": "reference",
                "name": "IPathMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.paths"
              }
            }
          },
          "Method": {
            "InnerRadiusRatio": {
              "flags": {
                "isStatic": true,
                "isExported": true,
                "isPublic": true
              },
              "signatures": [
                {
                  "name": "InnerRadiusRatio",
                  "kindString": "Call signature",
                  "parameters": [
                    {
                      "name": "numberOfPoints",
                      "flags": {},
                      "type": "number"
                    },
                    {
                      "name": "skipPoints",
                      "flags": {},
                      "type": "number"
                    }
                  ],
                  "type": "number"
                }
              ],
              "sources": [
                {
                  "fileName": "models/Star.ts",
                  "line": 30,
                  "character": 38
                }
              ]
            }
          }
        },
        "Text": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "models/Text.ts",
              "line": 3,
              "character": 21
            }
          ],
          "implementedTypes": [
            {
              "type": "reference",
              "name": "IModel"
            }
          ],
          "Constructor": {
            "signatures": [
              {
                "name": "new Text",
                "kindString": "Constructor signature",
                "comment": {
                  "shortText": "Renders text in a given font to a model.",
                  "returns": "Model of the text.\n"
                },
                "parameters": [
                  {
                    "name": "font",
                    "flags": {},
                    "type": "opentype.Font"
                  },
                  {
                    "name": "text",
                    "flags": {},
                    "type": "string"
                  },
                  {
                    "name": "fontSize",
                    "flags": {},
                    "type": "number"
                  },
                  {
                    "name": "combine",
                    "flags": {},
                    "type": "boolean",
                    "defaultValue": "false"
                  },
                  {
                    "name": "centerCharacterOrigin",
                    "flags": {},
                    "type": "boolean",
                    "defaultValue": "false"
                  },
                  {
                    "name": "bezierAccuracy",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "number"
                  },
                  {
                    "name": "opentypeOptions",
                    "flags": {
                      "isOptional": true
                    },
                    "type": "opentype.RenderOptions"
                  }
                ],
                "type": "Text"
              }
            ]
          },
          "Property": {
            "models": {
              "flags": {
                "isExported": true,
                "isPublic": true
              },
              "sources": [
                {
                  "fileName": "models/Text.ts",
                  "line": 4,
                  "character": 21
                }
              ],
              "type": {
                "type": "reference",
                "name": "IModelMap"
              },
              "implementationOf": {
                "type": "reference",
                "name": "IModel.models"
              }
            }
          },
          "Method": {
            "glyphToModel": {
              "flags": {
                "isStatic": true,
                "isExported": true
              },
              "signatures": [
                {
                  "name": "glyphToModel",
                  "kindString": "Call signature",
                  "comment": {
                    "shortText": "Convert an opentype glyph to a model.",
                    "returns": "Model of the glyph.\n"
                  },
                  "parameters": [
                    {
                      "name": "glyph",
                      "flags": {},
                      "comment": "Opentype.Glyph object.",
                      "type": "opentype.Glyph"
                    },
                    {
                      "name": "fontSize",
                      "flags": {},
                      "comment": "Font size.",
                      "type": "number"
                    },
                    {
                      "name": "bezierAccuracy",
                      "flags": {
                        "isOptional": true
                      },
                      "comment": "Optional accuracy of Bezier curves.",
                      "type": "number"
                    }
                  ],
                  "type": "IModel"
                }
              ],
              "sources": [
                {
                  "fileName": "models/Text.ts",
                  "line": 72,
                  "character": 27
                }
              ]
            }
          }
        }
      }
    }
  },
  "Interface": {
    "ICascadeModel": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/cascades.ts",
          "line": 5,
          "character": 34
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "ICascade"
        }
      ],
      "Property": {
        "$initial": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The initial context object of the cascade."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 916,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$initial"
          }
        },
        "$reset": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Use the $original as the $result."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 926,
              "character": 14
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {
                "isExported": true
              },
              "signatures": [
                {
                  "name": "__call",
                  "kindString": "Call signature",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "this"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 926,
                  "character": 15
                }
              ]
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$reset"
          }
        },
        "$result": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The current final value of the cascade."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 921,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$result"
          }
        }
      },
      "Method": {
        "addCaption": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addCaption",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a Caption object to a model.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "text",
                  "flags": {},
                  "comment": "Text to add.",
                  "type": "string"
                },
                {
                  "name": "leftAnchorPoint",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional Point on left side middle of text.",
                  "type": "IPoint"
                },
                {
                  "name": "rightAnchorPoint",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional Point on right side middle of text.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 16,
              "character": 18
            }
          ]
        },
        "addModel": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addModel",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a model as a child. This is basically equivalent to:\n```\nparentModel.models[childModelId] = childModel;\n```\nwith additional checks to make it safe for cascading.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "childModel",
                  "flags": {},
                  "comment": "The model to add.",
                  "type": "IModel"
                },
                {
                  "name": "childModelId",
                  "flags": {},
                  "comment": "The id of the child model.",
                  "type": "string"
                },
                {
                  "name": "overWrite",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Optional flag to overwrite any model referenced by childModelId. Default is false, which will create an id similar to childModelId.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 31,
              "character": 16
            }
          ]
        },
        "addPath": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addPath",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a path as a child. This is basically equivalent to:\n```\nparentModel.paths[childPathId] = childPath;\n```\nwith additional checks to make it safe for cascading.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "pathContext",
                  "flags": {},
                  "comment": "The path to add.",
                  "type": "IPath"
                },
                {
                  "name": "pathId",
                  "flags": {},
                  "comment": "The id of the path.",
                  "type": "string"
                },
                {
                  "name": "overWrite",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Optional flag to overwrite any path referenced by pathId. Default is false, which will create an id similar to pathId.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 46,
              "character": 15
            }
          ]
        },
        "addTo": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addTo",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a model as a child of another model. This is basically equivalent to:\n```\nparentModel.models[childModelId] = childModel;\n```\nwith additional checks to make it safe for cascading.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "parentModel",
                  "flags": {},
                  "comment": "The model to add to.",
                  "type": "IModel"
                },
                {
                  "name": "childModelId",
                  "flags": {},
                  "comment": "The id of the child model.",
                  "type": "string"
                },
                {
                  "name": "overWrite",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Optional flag to overwrite any model referenced by childModelId. Default is false, which will create an id similar to childModelId.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 61,
              "character": 13
            }
          ]
        },
        "breakPathsAtIntersections": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "breakPathsAtIntersections",
              "kindString": "Call signature",
              "comment": {
                "shortText": "DEPRECATED\nBreak a model's paths everywhere they intersect with another path.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "modelToIntersect",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional model containing paths to look for intersection, or else the modelToBreak will be used.",
                  "type": "IModel"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 71,
              "character": 33
            }
          ]
        },
        "center": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "center",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Center a model at [0, 0].",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "centerX",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default true) Boolean to center on the x axis. Default is true.",
                  "type": "boolean"
                },
                {
                  "name": "centerY",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default true) Boolean to center on the y axis. Default is true.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 81,
              "character": 14
            }
          ]
        },
        "clone": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "clone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Clone a model. Alias of makerjs.cloneObject(modelToClone)",
                "returns": "this cascade container, this.$result will be A clone of the model you passed.\n\n"
              },
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 89,
              "character": 13
            }
          ]
        },
        "combine": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "combine",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Combine 2 models. Each model will be modified accordingly.",
                "returns": "this cascade container, this.$result will be A new model containing both of the input models as \"a\" and \"b\".\n\n"
              },
              "parameters": [
                {
                  "name": "modelB",
                  "flags": {},
                  "comment": "Second model to combine.",
                  "type": "IModel"
                },
                {
                  "name": "includeAInsideB",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Flag to include paths from modelA which are inside of modelB.",
                  "type": "boolean"
                },
                {
                  "name": "includeAOutsideB",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default true) Flag to include paths from modelA which are outside of modelB.",
                  "type": "boolean"
                },
                {
                  "name": "includeBInsideA",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Flag to include paths from modelB which are inside of modelA.",
                  "type": "boolean"
                },
                {
                  "name": "includeBOutsideA",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default true) Flag to include paths from modelB which are outside of modelA.",
                  "type": "boolean"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional ICombineOptions object.",
                  "type": "ICombineOptions"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 103,
              "character": 15
            }
          ]
        },
        "combineIntersection": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "combineIntersection",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Combine 2 models, resulting in a intersection. Each model will be modified accordingly.",
                "returns": "this cascade container, this.$result will be A new model containing both of the input models as \"a\" and \"b\".\n\n"
              },
              "parameters": [
                {
                  "name": "modelB",
                  "flags": {},
                  "comment": "Second model to combine.",
                  "type": "IModel"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 112,
              "character": 27
            }
          ]
        },
        "combineSubtraction": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "combineSubtraction",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Combine 2 models, resulting in a subtraction of B from A. Each model will be modified accordingly.",
                "returns": "this cascade container, this.$result will be A new model containing both of the input models as \"a\" and \"b\".\n\n"
              },
              "parameters": [
                {
                  "name": "modelB",
                  "flags": {},
                  "comment": "Second model to combine.",
                  "type": "IModel"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 121,
              "character": 26
            }
          ]
        },
        "combineUnion": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "combineUnion",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Combine 2 models, resulting in a union. Each model will be modified accordingly.",
                "returns": "this cascade container, this.$result will be A new model containing both of the input models as \"a\" and \"b\".\n\n"
              },
              "parameters": [
                {
                  "name": "modelB",
                  "flags": {},
                  "comment": "Second model to combine.",
                  "type": "IModel"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 130,
              "character": 20
            }
          ]
        },
        "convertUnits": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "convertUnits",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Convert a model to match a different unit system.",
                "returns": "this cascade container, this.$result will be The scaled model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "destUnitType",
                  "flags": {},
                  "comment": "The unit system.",
                  "type": "string"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 139,
              "character": 20
            }
          ]
        },
        "distort": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "distort",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a distorted copy of a model - scale x and y individually.",
                "returns": "this cascade container, this.$result will be New model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "scaleX",
                  "flags": {},
                  "comment": "The amount of x scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleY",
                  "flags": {},
                  "comment": "The amount of y scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleOrigin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Optional boolean to scale the origin point. Typically false for the root model.",
                  "type": "boolean"
                },
                {
                  "name": "bezierAccuracy",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional accuracy of Bezier curves.",
                  "type": "number"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 151,
              "character": 15
            }
          ]
        },
        "expandPaths": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "expandPaths",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Expand all paths in a model, then combine the resulting expansions.",
                "returns": "this cascade container, this.$result will be Model which surrounds the paths of the original model.\n\n"
              },
              "parameters": [
                {
                  "name": "distance",
                  "flags": {},
                  "comment": "Distance to expand.",
                  "type": "number"
                },
                {
                  "name": "joints",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default 0) Number of points at a joint between paths. Use 0 for round joints, 1 for pointed joints, 2 for beveled joints.",
                  "type": "number"
                },
                {
                  "name": "combineOptions",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default {}) Optional object containing combine options.",
                  "type": "ICombineOptions"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 162,
              "character": 19
            }
          ]
        },
        "layer": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "layer",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Set the layer of a model. This is equivalent to:\n```\nmodelContext.layer = layer;\n```",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "layer",
                  "flags": {},
                  "comment": "The layer name.",
                  "type": "string"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 174,
              "character": 13
            }
          ]
        },
        "mirror": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "mirror",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a clone of a model, mirrored on either or both x and y axes.",
                "returns": "this cascade container, this.$result will be Mirrored model.\n\n"
              },
              "parameters": [
                {
                  "name": "mirrorX",
                  "flags": {},
                  "comment": "Boolean to mirror on the x axis.",
                  "type": "boolean"
                },
                {
                  "name": "mirrorY",
                  "flags": {},
                  "comment": "Boolean to mirror on the y axis.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 184,
              "character": 14
            }
          ]
        },
        "move": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "move",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a model to an absolute point. Note that this is also accomplished by directly setting the origin property. This function exists for cascading.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "origin",
                  "flags": {},
                  "comment": "The new position of the model.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 193,
              "character": 12
            }
          ]
        },
        "moveRelative": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "moveRelative",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a model's origin by a relative amount.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "delta",
                  "flags": {},
                  "comment": "The x & y adjustments as a point object.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 202,
              "character": 20
            }
          ]
        },
        "originate": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "originate",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Moves all of a model's children (models and paths, recursively) in reference to a single common origin. Useful when points between children need to connect to each other.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "origin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional offset reference point.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 211,
              "character": 17
            }
          ]
        },
        "outline": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "outline",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Outline a model by a specified distance. Useful for accommodating for kerf.",
                "returns": "this cascade container, this.$result will be Model which surrounds the paths outside of the original model.\n\n"
              },
              "parameters": [
                {
                  "name": "distance",
                  "flags": {},
                  "comment": "Distance to outline.",
                  "type": "number"
                },
                {
                  "name": "joints",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default 0) Number of points at a joint between paths. Use 0 for round joints, 1 for pointed joints, 2 for beveled joints.",
                  "type": "number"
                },
                {
                  "name": "inside",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Optional boolean to draw lines inside the model instead of outside.",
                  "type": "boolean"
                },
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default {}) Options to send to combine() function.",
                  "type": "ICombineOptions"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 223,
              "character": 15
            }
          ]
        },
        "prefixPathIds": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "prefixPathIds",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Prefix the ids of paths in a model.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "prefix",
                  "flags": {},
                  "comment": "The prefix to prepend on paths ids.",
                  "type": "string"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 232,
              "character": 21
            }
          ]
        },
        "removeDeadEnds": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "removeDeadEnds",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Remove paths from a model which have endpoints that do not connect to other paths.",
                "returns": "this cascade container, this.$result will be The input model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "pointMatchingDistance",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional max distance to consider two points as the same.",
                  "type": "number"
                },
                {
                  "name": "keep",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional callback function (which should return a boolean) to decide if a dead end path should be kept instead.",
                  "type": "IWalkPathBooleanCallback"
                },
                {
                  "name": "trackDeleted",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional callback function which will log discarded paths and the reason they were discarded.",
                  "type": "undefined"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 243,
              "character": 22
            }
          ]
        },
        "rotate": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "rotate",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Rotate a model.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "The amount of rotation, in degrees.",
                  "type": "number"
                },
                {
                  "name": "rotationOrigin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default [0, 0]) The center point of rotation.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 253,
              "character": 14
            }
          ]
        },
        "scale": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "scale",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Scale a model.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "scaleValue",
                  "flags": {},
                  "comment": "The amount of scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleOrigin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Optional boolean to scale the origin point. Typically false for the root model.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 263,
              "character": 13
            }
          ]
        },
        "simplify": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "simplify",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Simplify a model's paths by reducing redundancy: combine multiple overlapping paths into a single path. The model must be originated.",
                "returns": "this cascade container, this.$result will be The simplified model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "options",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional options object.",
                  "type": "ISimplifyOptions"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 272,
              "character": 16
            }
          ]
        },
        "walk": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "walk",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Recursively walk through all child models and paths for a given model.",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "options",
                  "flags": {},
                  "comment": "Object containing callbacks.",
                  "type": "IWalkOptions"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 281,
              "character": 12
            }
          ]
        },
        "zero": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "zero",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a model so its bounding box begins at [0, 0].",
                "returns": "this cascade container, this.$result will be The original model (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "zeroX",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default true) Boolean to zero on the x axis. Default is true.",
                  "type": "boolean"
                },
                {
                  "name": "zeroY",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default true) Boolean to zero on the y axis. Default is true.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadeModel"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 291,
              "character": 12
            }
          ]
        }
      }
    },
    "ICascadePath": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/cascades.ts",
          "line": 294,
          "character": 33
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "ICascade"
        }
      ],
      "Property": {
        "$initial": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The initial context object of the cascade."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 916,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$initial"
          }
        },
        "$reset": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Use the $original as the $result."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 926,
              "character": 14
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {
                "isExported": true
              },
              "signatures": [
                {
                  "name": "__call",
                  "kindString": "Call signature",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "this"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 926,
                  "character": 15
                }
              ]
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$reset"
          }
        },
        "$result": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The current final value of the cascade."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 921,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$result"
          }
        }
      },
      "Method": {
        "addTo": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "addTo",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add a path to a model. This is basically equivalent to:\n```\nparentModel.paths[pathId] = childPath;\n```\nwith additional checks to make it safe for cascading.",
                "returns": "this cascade container, this.$result will be The original path (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "parentModel",
                  "flags": {},
                  "comment": "The model to add to.",
                  "type": "IModel"
                },
                {
                  "name": "pathId",
                  "flags": {},
                  "comment": "The id of the path.",
                  "type": "string"
                },
                {
                  "name": "overwrite",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Optional flag to overwrite any path referenced by pathId. Default is false, which will create an id similar to pathId.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 309,
              "character": 13
            }
          ]
        },
        "alterLength": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "alterLength",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Alter a path by lengthening or shortening it.",
                "returns": "this cascade container, this.$result will be The original path (for cascading), or null if the path could not be altered.\n\n"
              },
              "parameters": [
                {
                  "name": "distance",
                  "flags": {},
                  "comment": "Numeric amount of length to add or remove from the path. Use a positive number to lengthen, negative to shorten. When shortening: this function will not alter the path and will return null if the resulting path length is less than or equal to zero.",
                  "type": "number"
                },
                {
                  "name": "useOrigin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default false) Optional flag to alter from the origin instead of the end of the path.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 319,
              "character": 19
            }
          ]
        },
        "breakAtPoint": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "breakAtPoint",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Breaks a path in two. The supplied path will end at the supplied pointOfBreak,\na new path is returned which begins at the pointOfBreak and ends at the supplied path's initial end point.\nFor Circle, the original path will be converted in place to an Arc, and null is returned.",
                "returns": "this cascade container, this.$result will be A new path of the same type, when path type is line or arc. Returns null for circle.\n\n"
              },
              "parameters": [
                {
                  "name": "pointOfBreak",
                  "flags": {},
                  "comment": "The point at which to break the path.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 330,
              "character": 20
            }
          ]
        },
        "center": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "center",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Center a path at [0, 0].",
                "returns": "this cascade container, this.$result will be The original path (for cascading).\n\n"
              },
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 338,
              "character": 14
            }
          ]
        },
        "clone": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "clone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a clone of a path. This is faster than cloneObject.",
                "returns": "this cascade container, this.$result will be Cloned path.\n\n"
              },
              "parameters": [
                {
                  "name": "offset",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional point to move path a relative distance.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 347,
              "character": 13
            }
          ]
        },
        "copyProps": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "copyProps",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Copy the schema properties of one path to another.",
                "returns": "this cascade container, this.$result will be The source path.\n\n"
              },
              "parameters": [
                {
                  "name": "destPath",
                  "flags": {},
                  "comment": "The destination path to copy property values to.",
                  "type": "IPath"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 356,
              "character": 17
            }
          ]
        },
        "layer": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "layer",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Set the layer of a path. This is equivalent to:\n```\npathContext.layer = layer;\n```",
                "returns": "this cascade container, this.$result will be The original path (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "layer",
                  "flags": {},
                  "comment": "The layer name.",
                  "type": "string"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 368,
              "character": 13
            }
          ]
        },
        "mirror": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "mirror",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a clone of a path, mirrored on either or both x and y axes.",
                "returns": "this cascade container, this.$result will be Mirrored path.\n\n"
              },
              "parameters": [
                {
                  "name": "mirrorX",
                  "flags": {},
                  "comment": "Boolean to mirror on the x axis.",
                  "type": "boolean"
                },
                {
                  "name": "mirrorY",
                  "flags": {},
                  "comment": "Boolean to mirror on the y axis.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 378,
              "character": 14
            }
          ]
        },
        "move": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "move",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a path to an absolute point.",
                "returns": "this cascade container, this.$result will be The original path (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "origin",
                  "flags": {},
                  "comment": "The new origin for the path.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 387,
              "character": 12
            }
          ]
        },
        "moveRelative": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "moveRelative",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a path's origin by a relative amount.",
                "returns": "this cascade container, this.$result will be The original path (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "delta",
                  "flags": {},
                  "comment": "The x & y adjustments as a point object.",
                  "type": "IPoint"
                },
                {
                  "name": "subtract",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional boolean to subtract instead of add.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 397,
              "character": 20
            }
          ]
        },
        "rotate": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "rotate",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Rotate a path.",
                "returns": "this cascade container, this.$result will be The original path (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "The amount of rotation, in degrees.",
                  "type": "number"
                },
                {
                  "name": "rotationOrigin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default [0, 0]) The center point of rotation.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 407,
              "character": 14
            }
          ]
        },
        "scale": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "scale",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Scale a path.",
                "returns": "this cascade container, this.$result will be The original path (for cascading).\n\n"
              },
              "parameters": [
                {
                  "name": "scaleValue",
                  "flags": {},
                  "comment": "The amount of scaling.",
                  "type": "number"
                }
              ],
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 416,
              "character": 13
            }
          ]
        },
        "zero": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "zero",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Move a path so its bounding box begins at [0, 0].",
                "returns": "this cascade container, this.$result will be The original path (for cascading).\n\n"
              },
              "type": "ICascadePath"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 424,
              "character": 12
            }
          ]
        }
      }
    },
    "ICascadePoint": {
      "flags": {
        "isExported": true
      },
      "sources": [
        {
          "fileName": "core/cascades.ts",
          "line": 427,
          "character": 34
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "ICascade"
        }
      ],
      "Property": {
        "$initial": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The initial context object of the cascade."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 916,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$initial"
          }
        },
        "$reset": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Use the $original as the $result."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 926,
              "character": 14
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {
                "isExported": true
              },
              "signatures": [
                {
                  "name": "__call",
                  "kindString": "Call signature",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "this"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 926,
                  "character": 15
                }
              ]
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$reset"
          }
        },
        "$result": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The current final value of the cascade."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 921,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "ICascade.$result"
          }
        }
      },
      "Method": {
        "add": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "add",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Add two points together and return the result as a new point object.",
                "returns": "this cascade container, this.$result will be A new point object.\n\n"
              },
              "parameters": [
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second point.",
                  "type": "IPoint"
                },
                {
                  "name": "subtract",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional boolean to subtract instead of add.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 437,
              "character": 11
            }
          ]
        },
        "average": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "average",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get the average of two points.",
                "returns": "this cascade container, this.$result will be New point object which is the average of a and b.\n\n"
              },
              "parameters": [
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second point.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 446,
              "character": 15
            }
          ]
        },
        "clone": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "clone",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Clone a point into a new point.",
                "returns": "this cascade container, this.$result will be A new point with same values as the original.\n\n"
              },
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 454,
              "character": 13
            }
          ]
        },
        "closest": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "closest",
              "kindString": "Call signature",
              "comment": {
                "shortText": "From an array of points, find the closest point to a given reference point.",
                "returns": "this cascade container, this.$result will be The first closest point from the pointOptions.\n\n"
              },
              "parameters": [
                {
                  "name": "pointOptions",
                  "flags": {},
                  "comment": "Array of points to choose from."
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 463,
              "character": 15
            }
          ]
        },
        "distort": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "distort",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Distort a point's coordinates.",
                "returns": "this cascade container, this.$result will be A new point.\n\n"
              },
              "parameters": [
                {
                  "name": "scaleX",
                  "flags": {},
                  "comment": "The amount of x scaling.",
                  "type": "number"
                },
                {
                  "name": "scaleY",
                  "flags": {},
                  "comment": "The amount of y scaling.",
                  "type": "number"
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 473,
              "character": 15
            }
          ]
        },
        "mirror": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "mirror",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Create a clone of a point, mirrored on either or both x and y axes.",
                "returns": "this cascade container, this.$result will be Mirrored point.\n\n"
              },
              "parameters": [
                {
                  "name": "mirrorX",
                  "flags": {},
                  "comment": "Boolean to mirror on the x axis.",
                  "type": "boolean"
                },
                {
                  "name": "mirrorY",
                  "flags": {},
                  "comment": "Boolean to mirror on the y axis.",
                  "type": "boolean"
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 483,
              "character": 14
            }
          ]
        },
        "rotate": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "rotate",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Rotate a point.",
                "returns": "this cascade container, this.$result will be A new point.\n\n"
              },
              "parameters": [
                {
                  "name": "angleInDegrees",
                  "flags": {},
                  "comment": "The amount of rotation, in degrees.",
                  "type": "number"
                },
                {
                  "name": "rotationOrigin",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "(default [0, 0]) The center point of rotation.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 493,
              "character": 14
            }
          ]
        },
        "rounded": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "rounded",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Round the values of a point.",
                "returns": "this cascade container, this.$result will be A new point with the values rounded.\n\n"
              },
              "parameters": [
                {
                  "name": "accuracy",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": "Optional exemplar number of decimal places.",
                  "type": "number"
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 502,
              "character": 15
            }
          ]
        },
        "scale": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "scale",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Scale a point's coordinates.",
                "returns": "this cascade container, this.$result will be A new point.\n\n"
              },
              "parameters": [
                {
                  "name": "scaleValue",
                  "flags": {},
                  "comment": "The amount of scaling.",
                  "type": "number"
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 511,
              "character": 13
            }
          ]
        },
        "subtract": {
          "flags": {
            "isExported": true
          },
          "signatures": [
            {
              "name": "subtract",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Subtract a point from another point, and return the result as a new point. Shortcut to Add(a, b, subtract = true).",
                "returns": "this cascade container, this.$result will be A new point object.\n\n"
              },
              "parameters": [
                {
                  "name": "b",
                  "flags": {},
                  "comment": "Second point.",
                  "type": "IPoint"
                }
              ],
              "type": "ICascadePoint"
            }
          ],
          "sources": [
            {
              "fileName": "core/cascades.ts",
              "line": 520,
              "character": 16
            }
          ]
        }
      }
    },
    "ICollection": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A collection for items that share a common key."
      },
      "typeParameter": [
        {
          "name": "K",
          "kindString": "Type parameter",
          "flags": {}
        },
        {
          "name": "T",
          "kindString": "Type parameter",
          "flags": {}
        }
      ],
      "sources": [
        {
          "fileName": "core/collect.ts",
          "line": 13,
          "character": 32
        }
      ],
      "Property": {
        "items": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 15,
              "character": 13
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "typeParameter",
              "name": "T"
            }
          }
        },
        "key": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 14,
              "character": 11
            }
          ],
          "type": {
            "type": "typeParameter",
            "name": "K"
          }
        }
      }
    },
    "ICollectionKeyComparer": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Compare keys to see if they are equal."
      },
      "typeParameter": [
        {
          "name": "K",
          "kindString": "Type parameter",
          "flags": {}
        }
      ],
      "signatures": [
        {
          "name": "__call",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Compare keys to see if they are equal."
          },
          "parameters": [
            {
              "name": "a",
              "flags": {},
              "type": "K"
            },
            {
              "name": "b",
              "flags": {},
              "type": "K"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/collect.ts",
          "line": 6,
          "character": 43
        }
      ]
    },
    "IPointGraphIndexElement": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "The element type stored in the index of a PointGraph."
      },
      "sources": [
        {
          "fileName": "core/collect.ts",
          "line": 114,
          "character": 44
        }
      ],
      "Property": {
        "kdId": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "This point's ordinal position in the kd-tree."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 139,
              "character": 12
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "merged": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Array of other pointId's merged with this one."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 129,
              "character": 14
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        },
        "point": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The point."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 119,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "pointId": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The id of this point."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 124,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "valueIds": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Array of valueId's for this point."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 134,
              "character": 16
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        }
      }
    },
    "IBoundingHex": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A hexagon which surrounds a model."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 838,
          "character": 33
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IModel"
        }
      ],
      "Property": {
        "caption": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional Caption object."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 232,
              "character": 15
            }
          ],
          "type": {
            "type": "reference",
            "name": "ICaption"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.caption"
          }
        },
        "exporterOptions": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional exporter options for this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 237,
              "character": 23
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {
                "isExported": true
              },
              "indexSignature": {
                "name": "__index",
                "kindString": "Index signature",
                "flags": {},
                "parameters": [
                  {
                    "name": "exporterName",
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              },
              "sources": [
                {
                  "fileName": "core/schema.ts",
                  "line": 237,
                  "character": 25
                }
              ]
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.exporterOptions"
          }
        },
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 227,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.layer"
          }
        },
        "models": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional map of models within this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 212,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IModelMap"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.models"
          }
        },
        "notes": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "An author may wish to add notes to this model instance."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 222,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.notes"
          }
        },
        "origin": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional origin location of this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 197,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.origin"
          }
        },
        "paths": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional map of path objects in this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 207,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPathMap"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.paths"
          }
        },
        "radius": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Radius of the hexagon, which is also the length of a side."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 843,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "type": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A model may want to specify its type, but this value is not employed yet."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 202,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.\"type\""
          }
        },
        "units": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional unit system of this model. See UnitType for possible values."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 217,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IModel.units"
          }
        }
      }
    },
    "ICascade": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A container that allows a series of functions to be called upon an object."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 911,
          "character": 29
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "ICascadeModel"
        },
        {
          "type": "reference",
          "name": "ICascadePath"
        },
        {
          "type": "reference",
          "name": "ICascadePoint"
        }
      ],
      "implementedBy": [
        {
          "type": "reference",
          "name": "Cascade"
        }
      ],
      "Property": {
        "$initial": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The initial context object of the cascade."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 916,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          }
        },
        "$reset": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Use the $original as the $result."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 926,
              "character": 14
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {
                "isExported": true
              },
              "signatures": [
                {
                  "name": "__call",
                  "kindString": "Call signature",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "this"
                  }
                }
              ],
              "sources": [
                {
                  "fileName": "core/maker.ts",
                  "line": 926,
                  "character": 15
                }
              ]
            }
          }
        },
        "$result": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The current final value of the cascade."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 921,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          }
        }
      }
    },
    "IChain": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A chain of paths which connect end to end."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 701,
          "character": 27
        }
      ],
      "Property": {
        "contains": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Chains that are contained within this chain. Populated when chains are found with the 'contain' option"
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 721,
              "character": 16
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IChain"
            }
          }
        },
        "endless": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Flag if this chain forms a loop end to end."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 711,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        "links": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The links in this chain."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 706,
              "character": 13
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IChainLink"
            }
          }
        },
        "pathLength": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Total length of all paths in the chain."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 716,
              "character": 18
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      }
    },
    "IChainCallback": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Callback to model.findChains() with resulting array of chains and unchained paths."
      },
      "signatures": [
        {
          "name": "__call",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Callback to model.findChains() with resulting array of chains and unchained paths."
          },
          "parameters": [
            {
              "name": "chains",
              "flags": {}
            },
            {
              "name": "loose",
              "flags": {}
            },
            {
              "name": "layer",
              "flags": {},
              "type": "string"
            },
            {
              "name": "ignored",
              "flags": {
                "isOptional": true
              }
            }
          ],
          "type": "void"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 744,
          "character": 35
        }
      ]
    },
    "IChainLink": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A link in a chain, with direction of flow."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 675,
          "character": 31
        }
      ],
      "Property": {
        "endPoints": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The endpoints of the path, in absolute coords."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 690,
              "character": 17
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IPoint"
            }
          }
        },
        "pathLength": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Length of the path."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 695,
              "character": 18
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "reversed": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Path flows forwards or reverse."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 685,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        "walkedPath": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Reference to the path."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 680,
              "character": 18
            }
          ],
          "type": {
            "type": "reference",
            "name": "IWalkPath"
          }
        }
      }
    },
    "IChainsMap": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A map of chains by layer."
      },
      "indexSignature": {
        "name": "__index",
        "kindString": "Index signature",
        "flags": {},
        "comment": {
          "shortText": "A map of chains by layer."
        },
        "parameters": [
          {
            "name": "layer",
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "intrinsic",
              "name": "string"
            }
          }
        ],
        "type": {
          "type": "array",
          "elementType": {
            "type": "reference",
            "name": "IChain"
          }
        }
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 727,
          "character": 31
        }
      ]
    },
    "ICombineOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to model.combine."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 538,
          "character": 36
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPointMatchOptions"
        }
      ],
      "Property": {
        "farPoint": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Point which is known to be outside of the model."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 548,
              "character": 16
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "measureA": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Cached measurements for model A."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 553,
              "character": 16
            }
          ],
          "type": {
            "type": "reference",
            "name": "Atlas"
          }
        },
        "measureB": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Cached measurements for model B."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 558,
              "character": 16
            }
          ],
          "type": {
            "type": "reference",
            "name": "Atlas"
          }
        },
        "out_deleted": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Output array of 2 models (corresponding to the input models) containing paths that were deleted in the combination.\nEach path will be of type IPathRemoved, which has a .reason property describing why it was removed."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 564,
              "character": 19
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IModel"
            }
          }
        },
        "pointMatchingDistance": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Max distance to consider two points as the same."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 532,
              "character": 29
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPointMatchOptions.pointMatchingDistance"
          }
        },
        "trimDeadEnds": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Flag to remove paths which are not part of a loop."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 543,
              "character": 20
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      }
    },
    "IContainChainsOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Sub-options to pass to model.findChains.contain option."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 777,
          "character": 42
        }
      ],
      "Property": {
        "alternateDirection": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Flag to alternate direction of contained chains."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 782,
              "character": 26
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      }
    },
    "IFindChainsOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to model.findChains."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 751,
          "character": 39
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPointMatchOptions"
        }
      ],
      "Property": {
        "byLayers": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Flag to separate chains by layers."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 756,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        "contain": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Flag to order chains in a heirarchy by their paths being within one another."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 766,
              "character": 15
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "intrinsic",
                "name": "boolean"
              },
              {
                "type": "reference",
                "name": "IContainChainsOptions"
              }
            ]
          }
        },
        "pointMatchingDistance": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Max distance to consider two points as the same."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 532,
              "character": 29
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPointMatchOptions.pointMatchingDistance"
          }
        },
        "shallow": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Flag to not recurse models, look only within current model's immediate paths."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 761,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        "unifyBeziers": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Flag to flatten BezierCurve arc segments into IPathBezierSeeds."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 771,
              "character": 20
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      }
    },
    "IFindLoopsOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to model.findLoops."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 581,
          "character": 38
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPointMatchOptions"
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IOpenJsCadOptions"
        }
      ],
      "Property": {
        "pointMatchingDistance": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Max distance to consider two points as the same."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 532,
              "character": 29
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPointMatchOptions.pointMatchingDistance"
          }
        },
        "removeFromOriginal": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Flag to remove looped paths from the original model."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 586,
              "character": 26
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      }
    },
    "IIsPointOnPathOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to measure.isPointOnPath."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 570,
          "character": 42
        }
      ],
      "Property": {
        "cachedLineSlope": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "The slope of the line, if applicable. This will be added to the options object if it did not exist."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 575,
              "character": 23
            }
          ],
          "type": {
            "type": "reference",
            "name": "ISlope"
          }
        }
      }
    },
    "IKit": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "An IKit is a model-producing class with some sample parameters. Think of it as a packaged model with instructions on how to best use it."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 887,
          "character": 25
        }
      ],
      "Constructor": {
        "signatures": [
          {
            "name": "new IKit",
            "kindString": "Constructor signature",
            "comment": {
              "shortText": "The constructor. The kit must be \"new-able\" and it must produce an IModel.\nIt can have any number of any type of parameters."
            },
            "parameters": [
              {
                "name": "args",
                "flags": {
                  "isRest": true
                }
              }
            ],
            "type": "IModel"
          }
        ]
      },
      "Property": {
        "metaParameters": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Attached to the constructor is a property named metaParameters which is an array of IMetaParameter objects.\nEach element of the array corresponds to a parameter of the constructor, in order."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 899,
              "character": 22
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IMetaParameter"
            }
          }
        },
        "notes": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Information about this kit, in plain text or markdown format."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 904,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      }
    },
    "IMeasure": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A measurement of extents, the high and low points."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 300,
          "character": 29
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IMeasureWithCenter"
        }
      ],
      "Property": {
        "high": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The point containing both the highest x and y values of the rectangle containing the item being measured."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 310,
              "character": 12
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "low": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The point containing both the lowest x and y values of the rectangle containing the item being measured."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 305,
              "character": 11
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        }
      }
    },
    "IMeasureMap": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A map of measurements."
      },
      "indexSignature": {
        "name": "__index",
        "kindString": "Index signature",
        "flags": {},
        "comment": {
          "shortText": "A map of measurements."
        },
        "parameters": [
          {
            "name": "key",
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "intrinsic",
              "name": "string"
            }
          }
        ],
        "type": {
          "type": "reference",
          "name": "IMeasure"
        }
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 337,
          "character": 32
        }
      ]
    },
    "IMeasurePointInsideOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to measure.isPointInsideModel()."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 362,
          "character": 47
        }
      ],
      "Property": {
        "farPoint": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional point of reference which is outside the bounds of the modelContext."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 367,
              "character": 16
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "measureAtlas": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional atlas of measurements of paths within the model (to prevent intersection calculations)."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 372,
              "character": 20
            }
          ],
          "type": {
            "type": "reference",
            "name": "Atlas"
          }
        },
        "out_intersectionPoints": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Output variable which will contain an array of points where the ray intersected the model. The ray is a line from pointToCheck to options.farPoint."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 377,
              "character": 30
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IPoint"
            }
          }
        }
      }
    },
    "IMeasureWithCenter": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A measurement of extents, with a center point."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 316,
          "character": 39
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IMeasure"
        }
      ],
      "Property": {
        "center": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The center point of the rectangle containing the item being measured."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 321,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "height": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The height of the rectangle containing the item being measured."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 331,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "high": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The point containing both the highest x and y values of the rectangle containing the item being measured."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 310,
              "character": 12
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IMeasure.high"
          }
        },
        "low": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The point containing both the lowest x and y values of the rectangle containing the item being measured."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 305,
              "character": 11
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IMeasure.low"
          }
        },
        "width": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The width of the rectangle containing the item being measured."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 326,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      }
    },
    "IMetaParameter": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Describes a parameter and its limits."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 851,
          "character": 35
        }
      ],
      "Property": {
        "max": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional maximum value of the range."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 871,
              "character": 11
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "min": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional minimum value of the range."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 866,
              "character": 11
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "step": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional step value between min and max."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 876,
              "character": 12
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "title": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Display text of the parameter."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 856,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Type of the parameter. Currently supports \"range\"."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 861,
              "character": 12
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "value": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Initial sample value for this parameter."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 881,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          }
        }
      }
    },
    "IModelPathCallback": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Callback signature for model.walkPaths()."
      },
      "signatures": [
        {
          "name": "__call",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Callback signature for model.walkPaths()."
          },
          "parameters": [
            {
              "name": "modelContext",
              "flags": {},
              "type": "IModel"
            },
            {
              "name": "pathId",
              "flags": {},
              "type": "string"
            },
            {
              "name": "pathContext",
              "flags": {},
              "type": "IPath"
            }
          ],
          "type": "void"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 622,
          "character": 39
        }
      ]
    },
    "IPathDirectional": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A path that may be indicated to \"flow\" in either direction between its endpoints."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 604,
          "character": 37
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPath"
        }
      ],
      "Property": {
        "endPoints": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The endpoints of the path."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 609,
              "character": 17
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IPoint"
            }
          }
        },
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 43,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.layer"
          }
        },
        "origin": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The main point of reference for this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 38,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.origin"
          }
        },
        "reversed": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Path flows forwards or reverse."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 614,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The type of the path, e.g. \"line\", \"circle\", or \"arc\". These strings are enumerated in pathType."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 33,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.\"type\""
          }
        }
      }
    },
    "IPathIntersection": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "An intersection of two paths."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 502,
          "character": 38
        }
      ],
      "Property": {
        "intersectionPoints": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Array of points where the two paths intersected. The length of the array may be either 1 or 2 points."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 507,
              "character": 26
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IPoint"
            }
          }
        },
        "path1Angles": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "This Array property will only be defined if the first parameter passed to pathIntersection is either an Arc or a Circle.\nIt contains the angles of intersection relative to the first path parameter.\nThe length of the array may be either 1 or 2."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 514,
              "character": 19
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        },
        "path2Angles": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "This Array property will only be defined if the second parameter passed to pathIntersection is either an Arc or a Circle.\nIt contains the angles of intersection relative to the second path parameter.\nThe length of the array may be either 1 or 2."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 521,
              "character": 19
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        }
      }
    },
    "IPathIntersectionBaseOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to path.intersection()"
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 470,
          "character": 49
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IPathIntersectionOptions"
        }
      ],
      "Property": {
        "excludeTangents": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional boolean to only return deep intersections, i.e. not on an end point or tangent."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 475,
              "character": 23
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        "out_AreOverlapped": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional output variable which will be set to true if the paths are overlapped."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 480,
              "character": 25
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      }
    },
    "IPathIntersectionOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to path.intersection()"
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 486,
          "character": 45
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPathIntersectionBaseOptions"
        }
      ],
      "Property": {
        "excludeTangents": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional boolean to only return deep intersections, i.e. not on an end point or tangent."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 475,
              "character": 23
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPathIntersectionBaseOptions.excludeTangents"
          }
        },
        "out_AreOverlapped": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional output variable which will be set to true if the paths are overlapped."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 480,
              "character": 25
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPathIntersectionBaseOptions.out_AreOverlapped"
          }
        },
        "path1Offset": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional boolean to only return deep intersections, i.e. not on an end point or tangent."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 491,
              "character": 19
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "path2Offset": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional output variable which will be set to true if the paths are overlapped."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 496,
              "character": 19
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        }
      }
    },
    "IPathRemoved": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A path that was removed in a combine operation."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 346,
          "character": 33
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPath"
        }
      ],
      "Property": {
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 43,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.layer"
          }
        },
        "origin": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The main point of reference for this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 38,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.origin"
          }
        },
        "reason": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Reason the path was removed."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 351,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "routeKey": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Original routekey of the path, to identify where it came from."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 356,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The type of the path, e.g. \"line\", \"circle\", or \"arc\". These strings are enumerated in pathType."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 33,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.\"type\""
          }
        }
      }
    },
    "IPointMatchOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options when matching points"
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 527,
          "character": 39
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IDXFRenderOptions"
        },
        {
          "type": "reference",
          "name": "ICombineOptions"
        },
        {
          "type": "reference",
          "name": "IFindLoopsOptions"
        },
        {
          "type": "reference",
          "name": "ISimplifyOptions"
        },
        {
          "type": "reference",
          "name": "IFindChainsOptions"
        },
        {
          "type": "reference",
          "name": "IJscadCagOptions"
        }
      ],
      "Property": {
        "pointMatchingDistance": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Max distance to consider two points as the same."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 532,
              "character": 29
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      }
    },
    "IRefModelInModel": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Reference to a model within a model."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 788,
          "character": 37
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IWalkModel"
        }
      ],
      "Property": {
        "childId": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 790,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "childModel": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 791,
              "character": 18
            }
          ],
          "type": {
            "type": "reference",
            "name": "IModel"
          }
        },
        "parentModel": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 789,
              "character": 19
            }
          ],
          "type": {
            "type": "reference",
            "name": "IModel"
          }
        }
      }
    },
    "IRefPathIdInModel": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Reference to a path id within a model."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 636,
          "character": 38
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IWalkPath"
        }
      ],
      "Property": {
        "modelContext": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 637,
              "character": 20
            }
          ],
          "type": {
            "type": "reference",
            "name": "IModel"
          }
        },
        "pathId": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 638,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      }
    },
    "IRouteOffset": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A route to either a path or a model, and the absolute offset of it."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 644,
          "character": 33
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IWalkPath"
        },
        {
          "type": "reference",
          "name": "IWalkModel"
        }
      ],
      "Property": {
        "layer": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 645,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "offset": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 646,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "route": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 647,
              "character": 13
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "string"
            }
          }
        },
        "routeKey": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 648,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      }
    },
    "ISimplifyOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to model.simplify()"
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 592,
          "character": 37
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPointMatchOptions"
        }
      ],
      "Property": {
        "pointMatchingDistance": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Max distance to consider two points as the same."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 532,
              "character": 29
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPointMatchOptions.pointMatchingDistance"
          }
        },
        "scalarMatchingDistance": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional"
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 597,
              "character": 30
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      }
    },
    "ISlope": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Slope and y-intercept of a line."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 444,
          "character": 27
        }
      ],
      "Property": {
        "hasSlope": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Boolean to see if line has slope or is vertical."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 449,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        },
        "line": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Line used to calculate this slope."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 459,
              "character": 12
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPathLine"
          }
        },
        "slope": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional value of non-vertical slope."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 454,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "yIntercept": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional value of y when x = 0."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 464,
              "character": 18
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      }
    },
    "IWalkModel": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A model reference in a walk."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 797,
          "character": 31
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IRefModelInModel"
        },
        {
          "type": "reference",
          "name": "IRouteOffset"
        }
      ],
      "Property": {
        "childId": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 790,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRefModelInModel.childId"
          }
        },
        "childModel": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 791,
              "character": 18
            }
          ],
          "type": {
            "type": "reference",
            "name": "IModel"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRefModelInModel.childModel"
          }
        },
        "layer": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 645,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRouteOffset.layer"
          }
        },
        "offset": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 646,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRouteOffset.offset"
          }
        },
        "parentModel": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 789,
              "character": 19
            }
          ],
          "type": {
            "type": "reference",
            "name": "IModel"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRefModelInModel.parentModel"
          }
        },
        "route": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 647,
              "character": 13
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "string"
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRouteOffset.route"
          }
        },
        "routeKey": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 648,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRouteOffset.routeKey"
          }
        }
      }
    },
    "IWalkModelCallback": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Callback signature for model.walk()."
      },
      "signatures": [
        {
          "name": "__call",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Callback signature for model.walk()."
          },
          "parameters": [
            {
              "name": "context",
              "flags": {},
              "type": "IWalkModel"
            }
          ],
          "type": "void"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 803,
          "character": 39
        }
      ]
    },
    "IWalkModelCancellableCallback": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Callback signature for model.walk(), which may return false to halt any further walking."
      },
      "signatures": [
        {
          "name": "__call",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Callback signature for model.walk(), which may return false to halt any further walking."
          },
          "parameters": [
            {
              "name": "context",
              "flags": {},
              "type": "IWalkModel"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 810,
          "character": 50
        }
      ]
    },
    "IWalkOptions": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Options to pass to model.walk()."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 817,
          "character": 33
        }
      ],
      "Property": {
        "afterChildWalk": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Callback for every child model in every model, after all of its children have been walked."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 832,
              "character": 22
            }
          ],
          "type": {
            "type": "reference",
            "name": "IWalkModelCallback"
          }
        },
        "beforeChildWalk": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Callback for every child model in every model. Return false to stop walking down further models."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 827,
              "character": 23
            }
          ],
          "type": {
            "type": "reference",
            "name": "IWalkModelCancellableCallback"
          }
        },
        "onPath": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Callback for every path in every model."
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 822,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IWalkPathCallback"
          }
        }
      }
    },
    "IWalkPath": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A path reference in a walk."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 654,
          "character": 30
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IRefPathIdInModel"
        },
        {
          "type": "reference",
          "name": "IRouteOffset"
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "ICrossedPath"
        },
        {
          "type": "reference",
          "name": "IWalkPathWithEndpoints"
        }
      ],
      "Property": {
        "layer": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 645,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRouteOffset.layer"
          }
        },
        "modelContext": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 637,
              "character": 20
            }
          ],
          "type": {
            "type": "reference",
            "name": "IModel"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRefPathIdInModel.modelContext"
          }
        },
        "offset": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 646,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRouteOffset.offset"
          }
        },
        "pathContext": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 655,
              "character": 19
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPath"
          }
        },
        "pathId": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 638,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRefPathIdInModel.pathId"
          }
        },
        "route": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 647,
              "character": 13
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "intrinsic",
              "name": "string"
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRouteOffset.route"
          }
        },
        "routeKey": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 648,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IRouteOffset.routeKey"
          }
        }
      }
    },
    "IWalkPathBooleanCallback": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Callback for returning a boolean from an IWalkPath."
      },
      "signatures": [
        {
          "name": "__call",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Callback for returning a boolean from an IWalkPath."
          },
          "parameters": [
            {
              "name": "context",
              "flags": {},
              "type": "IWalkPath"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 668,
          "character": 45
        }
      ]
    },
    "IWalkPathCallback": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Callback signature for path in model.walk()."
      },
      "signatures": [
        {
          "name": "__call",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Callback signature for path in model.walk()."
          },
          "parameters": [
            {
              "name": "context",
              "flags": {},
              "type": "IWalkPath"
            }
          ],
          "type": "void"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 661,
          "character": 38
        }
      ]
    },
    "IBezierRange": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Bezier t values for an arc path segment in a bezier curve."
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 121,
          "character": 33
        }
      ],
      "Property": {
        "endT": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The bezier t-value at the end point."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 131,
              "character": 12
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "startT": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The bezier t-value at the starting point."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 126,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      }
    },
    "ICaption": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Text annotation, diplayable natively to the output format."
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 147,
          "character": 29
        }
      ],
      "Property": {
        "anchor": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Invisible line to which the text is aligned.\nThe text will be horizontally and vertically centered on the center point of this line.\nThe text may be longer or shorter than the line, it is used only for position and angle.\nThe anchor line's endpoints may be omitted, in which the case the text will always remain non-angled, even if the model is rotated."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 160,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPathLine"
          }
        },
        "text": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "Caption text."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 152,
              "character": 12
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      }
    },
    "IModel": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A model is a composite object which may contain a map of paths, or a map of models recursively.",
        "text": "Example:\n```\nvar m = {\n  paths: {\n    \"line1\": { type: 'line', origin: [0, 0], end: [1, 1] },\n    \"line2\": { type: 'line', origin: [0, 0], end: [-1, -1] }\n  }\n};\n```\n"
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 192,
          "character": 27
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IBoundingHex"
        }
      ],
      "implementedBy": [
        {
          "type": "reference",
          "name": "Belt"
        },
        {
          "type": "reference",
          "name": "BezierCurve"
        },
        {
          "type": "reference",
          "name": "BoltCircle"
        },
        {
          "type": "reference",
          "name": "BoltRectangle"
        },
        {
          "type": "reference",
          "name": "ConnectTheDots"
        },
        {
          "type": "reference",
          "name": "Dogbone"
        },
        {
          "type": "reference",
          "name": "Dome"
        },
        {
          "type": "reference",
          "name": "Ellipse"
        },
        {
          "type": "reference",
          "name": "EllipticArc"
        },
        {
          "type": "reference",
          "name": "Holes"
        },
        {
          "type": "reference",
          "name": "Oval"
        },
        {
          "type": "reference",
          "name": "OvalArc"
        },
        {
          "type": "reference",
          "name": "Polygon"
        },
        {
          "type": "reference",
          "name": "Rectangle"
        },
        {
          "type": "reference",
          "name": "Ring"
        },
        {
          "type": "reference",
          "name": "RoundRectangle"
        },
        {
          "type": "reference",
          "name": "SCurve"
        },
        {
          "type": "reference",
          "name": "Slot"
        },
        {
          "type": "reference",
          "name": "Square"
        },
        {
          "type": "reference",
          "name": "Star"
        },
        {
          "type": "reference",
          "name": "Text"
        }
      ],
      "Property": {
        "caption": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional Caption object."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 232,
              "character": 15
            }
          ],
          "type": {
            "type": "reference",
            "name": "ICaption"
          }
        },
        "exporterOptions": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional exporter options for this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 237,
              "character": 23
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {},
              "indexSignature": {
                "name": "__index",
                "kindString": "Index signature",
                "flags": {},
                "parameters": [
                  {
                    "name": "exporterName",
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              },
              "sources": [
                {
                  "fileName": "core/schema.ts",
                  "line": 237,
                  "character": 25
                }
              ]
            }
          }
        },
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 227,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "models": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional map of models within this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 212,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IModelMap"
          }
        },
        "notes": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "An author may wish to add notes to this model instance."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 222,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "origin": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional origin location of this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 197,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "paths": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional map of path objects in this model."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 207,
              "character": 13
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPathMap"
          }
        },
        "type": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A model may want to specify its type, but this value is not employed yet."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 202,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "units": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional unit system of this model. See UnitType for possible values."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 217,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      }
    },
    "IModelMap": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Model objects by id."
      },
      "indexSignature": {
        "name": "__index",
        "kindString": "Index signature",
        "flags": {},
        "comment": {
          "shortText": "Model objects by id."
        },
        "parameters": [
          {
            "name": "id",
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "intrinsic",
              "name": "string"
            }
          }
        ],
        "type": {
          "type": "reference",
          "name": "IModel"
        }
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 175,
          "character": 30
        }
      ]
    },
    "IPath": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A line, curved line or other simple two dimensional shape."
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 28,
          "character": 26
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IPathRemoved"
        },
        {
          "type": "reference",
          "name": "IPathDirectional"
        },
        {
          "type": "reference",
          "name": "IPathLine"
        },
        {
          "type": "reference",
          "name": "IPathCircle"
        },
        {
          "type": "reference",
          "name": "IPathArcInBezierCurve"
        }
      ],
      "Property": {
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 43,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        },
        "origin": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The main point of reference for this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 38,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The type of the path, e.g. \"line\", \"circle\", or \"arc\". These strings are enumerated in pathType."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 33,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      }
    },
    "IPathArc": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "An arc path.",
        "text": "Examples:\n```\nvar arc: IPathArc = { type: 'arc', origin: [0, 0], radius: 7, startAngle: 0, endAngle: 45 };   //typescript\nvar arc = { type: 'arc', origin: [0, 0], radius: 7, startAngle: 0, endAngle: 45 };   //javascript\n```\n"
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 89,
          "character": 29
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPathCircle"
        }
      ],
      "implementedBy": [
        {
          "type": "reference",
          "name": "Arc"
        }
      ],
      "Property": {
        "endAngle": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The angle (in degrees) to end drawing the arc, in polar (counter-clockwise) direction. May be less than start angle if it past 360."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 99,
              "character": 16
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 43,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.layer"
          }
        },
        "origin": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The main point of reference for this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 38,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.origin"
          }
        },
        "radius": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The radius of the circle."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 77,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPathCircle.radius"
          }
        },
        "startAngle": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The angle (in degrees) to begin drawing the arc, in polar (counter-clockwise) direction."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 94,
              "character": 18
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The type of the path, e.g. \"line\", \"circle\", or \"arc\". These strings are enumerated in pathType."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 33,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.\"type\""
          }
        }
      }
    },
    "IPathArcInBezierCurve": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "An arc path segment in a bezier curve."
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 137,
          "character": 42
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPath"
        }
      ],
      "Property": {
        "bezierData": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 139,
              "character": 18
            }
          ],
          "type": {
            "type": "reference",
            "name": "IBezierRange"
          }
        },
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 43,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.layer"
          }
        },
        "origin": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The main point of reference for this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 38,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.origin"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The type of the path, e.g. \"line\", \"circle\", or \"arc\". These strings are enumerated in pathType."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 33,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.\"type\""
          }
        }
      }
    },
    "IPathBezierSeed": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A bezier seed defines the endpoints and control points of a bezier curve."
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 105,
          "character": 36
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPathLine"
        }
      ],
      "implementedBy": [
        {
          "type": "reference",
          "name": "BezierSeed"
        }
      ],
      "Property": {
        "controls": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The bezier control points. One point for quadratic, 2 points for cubic."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 110,
              "character": 16
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "IPoint"
            }
          }
        },
        "end": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The end point defining the line. The start point is the origin."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 60,
              "character": 11
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPathLine.end"
          }
        },
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 43,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.layer"
          }
        },
        "origin": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The main point of reference for this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 38,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.origin"
          }
        },
        "parentRange": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "T values of the parent if this is a child that represents a split."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 115,
              "character": 19
            }
          ],
          "type": {
            "type": "reference",
            "name": "IBezierRange"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The type of the path, e.g. \"line\", \"circle\", or \"arc\". These strings are enumerated in pathType."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 33,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.\"type\""
          }
        }
      }
    },
    "IPathCircle": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A circle path.",
        "text": "Examples:\n```\nvar circle: IPathCircle = { type: 'circle', origin: [0, 0], radius: 7 };   //typescript\nvar circle = { type: 'circle', origin: [0, 0], radius: 7 };   //javascript\n```\n"
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 72,
          "character": 32
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPath"
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IPathArc"
        }
      ],
      "implementedBy": [
        {
          "type": "reference",
          "name": "Circle"
        }
      ],
      "Property": {
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 43,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.layer"
          }
        },
        "origin": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The main point of reference for this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 38,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.origin"
          }
        },
        "radius": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The radius of the circle."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 77,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The type of the path, e.g. \"line\", \"circle\", or \"arc\". These strings are enumerated in pathType."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 33,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.\"type\""
          }
        }
      }
    },
    "IPathLine": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A line path.",
        "text": "Examples:\n```\nvar line: IPathLine = { type: 'line', origin: [0, 0], end: [1, 1] };   //typescript\nvar line = { type: 'line', origin: [0, 0], end: [1, 1] };   //javascript\n```\n"
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 55,
          "character": 30
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "name": "IPath"
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "name": "IPathBezierSeed"
        }
      ],
      "implementedBy": [
        {
          "type": "reference",
          "name": "Chord"
        },
        {
          "type": "reference",
          "name": "Line"
        },
        {
          "type": "reference",
          "name": "Parallel"
        }
      ],
      "Property": {
        "end": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The end point defining the line. The start point is the origin."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 60,
              "character": 11
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          }
        },
        "layer": {
          "flags": {
            "isExported": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Optional layer of this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 43,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.layer"
          }
        },
        "origin": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The main point of reference for this path."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 38,
              "character": 14
            }
          ],
          "type": {
            "type": "reference",
            "name": "IPoint"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.origin"
          }
        },
        "type": {
          "flags": {
            "isExported": true
          },
          "comment": {
            "shortText": "The type of the path, e.g. \"line\", \"circle\", or \"arc\". These strings are enumerated in pathType."
          },
          "sources": [
            {
              "fileName": "core/schema.ts",
              "line": 33,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "IPath.\"type\""
          }
        }
      }
    },
    "IPathMap": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Path objects by id."
      },
      "indexSignature": {
        "name": "__index",
        "kindString": "Index signature",
        "flags": {},
        "comment": {
          "shortText": "Path objects by id."
        },
        "parameters": [
          {
            "name": "id",
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "intrinsic",
              "name": "string"
            }
          }
        ],
        "type": {
          "type": "union",
          "types": [
            {
              "type": "reference",
              "name": "IPath"
            },
            {
              "type": "reference",
              "name": "IPathArc"
            },
            {
              "type": "reference",
              "name": "IPathCircle"
            },
            {
              "type": "reference",
              "name": "IPathLine"
            }
          ]
        }
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 168,
          "character": 29
        }
      ]
    },
    "IPoint": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "An x-y point in a two-dimensional space.\nImplemented as an array with 2 elements. The first element is x, the second element is y.",
        "text": "Examples:\n```\nvar p: IPoint = [0, 0];   //typescript\nvar p = [0, 0];   //javascript\n```\n"
      },
      "indexSignature": {
        "name": "__index",
        "kindString": "Index signature",
        "flags": {},
        "comment": {
          "shortText": "An x-y point in a two-dimensional space.\nImplemented as an array with 2 elements. The first element is x, the second element is y.",
          "text": "Examples:\n```\nvar p: IPoint = [0, 0];   //typescript\nvar p = [0, 0];   //javascript\n```\n"
        },
        "parameters": [
          {
            "name": "index",
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "intrinsic",
              "name": "number"
            }
          }
        ],
        "type": {
          "type": "intrinsic",
          "name": "number"
        }
      },
      "sources": [
        {
          "fileName": "core/schema.ts",
          "line": 19,
          "character": 27
        }
      ]
    }
  },
  "Class": {
    "Collector": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Collects items that share a common key."
      },
      "typeParameter": [
        {
          "name": "K",
          "kindString": "Type parameter",
          "flags": {}
        },
        {
          "name": "T",
          "kindString": "Type parameter",
          "flags": {}
        }
      ],
      "sources": [
        {
          "fileName": "core/collect.ts",
          "line": 21,
          "character": 26
        }
      ],
      "Constructor": {
        "signatures": [
          {
            "name": "new Collector",
            "kindString": "Constructor signature",
            "parameters": [
              {
                "name": "comparer",
                "flags": {
                  "isOptional": true
                },
                "type": "ICollectionKeyComparer"
              }
            ],
            "type": "Collector"
          }
        ]
      },
      "Property": {
        "collections": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 22,
              "character": 26
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "reference",
              "name": "ICollection",
              "typeArguments": [
                {
                  "type": "typeParameter",
                  "name": "K"
                },
                {
                  "type": "typeParameter",
                  "name": "T"
                }
              ]
            }
          },
          "defaultValue": " []"
        }
      },
      "Method": {
        "addItemToCollection": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "addItemToCollection",
              "kindString": "Call signature",
              "parameters": [
                {
                  "name": "key",
                  "flags": {},
                  "type": "K"
                },
                {
                  "name": "item",
                  "flags": {},
                  "type": "T"
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 27,
              "character": 34
            }
          ]
        },
        "findCollection": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "findCollection",
              "kindString": "Call signature",
              "parameters": [
                {
                  "name": "key",
                  "flags": {},
                  "type": "K"
                },
                {
                  "name": "action",
                  "flags": {
                    "isOptional": true
                  }
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 37,
              "character": 29
            }
          ]
        },
        "getCollectionsOfMultiple": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "getCollectionsOfMultiple",
              "kindString": "Call signature",
              "parameters": [
                {
                  "name": "cb",
                  "flags": {}
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 76,
              "character": 39
            }
          ]
        },
        "removeCollection": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "removeCollection",
              "kindString": "Call signature",
              "parameters": [
                {
                  "name": "key",
                  "flags": {},
                  "type": "K"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 52,
              "character": 31
            }
          ]
        },
        "removeItemFromCollection": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "removeItemFromCollection",
              "kindString": "Call signature",
              "parameters": [
                {
                  "name": "key",
                  "flags": {},
                  "type": "K"
                },
                {
                  "name": "item",
                  "flags": {},
                  "type": "T"
                }
              ],
              "type": "boolean"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 61,
              "character": 39
            }
          ]
        }
      }
    },
    "PointGraph": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "A graph of items which may be located on the same points."
      },
      "typeParameter": [
        {
          "name": "T",
          "kindString": "Type parameter",
          "flags": {}
        }
      ],
      "sources": [
        {
          "fileName": "core/collect.ts",
          "line": 145,
          "character": 27
        }
      ],
      "Constructor": {
        "signatures": [
          {
            "name": "new PointGraph",
            "kindString": "Constructor signature",
            "type": "PointGraph"
          }
        ]
      },
      "Property": {
        "graph": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "comment": {
            "shortText": "Map of unique points by x, then y, to a point id. This will remain intact even after merging."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 155,
              "character": 20
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {
                "isExported": true
              },
              "indexSignature": {
                "name": "__index",
                "kindString": "Index signature",
                "flags": {},
                "parameters": [
                  {
                    "name": "x",
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ],
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "name": "__type",
                    "kindString": "Type literal",
                    "flags": {
                      "isExported": true
                    },
                    "indexSignature": {
                      "name": "__index",
                      "kindString": "Index signature",
                      "flags": {},
                      "parameters": [
                        {
                          "name": "y",
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    },
                    "sources": [
                      {
                        "fileName": "core/collect.ts",
                        "line": 155,
                        "character": 36
                      }
                    ]
                  }
                }
              },
              "sources": [
                {
                  "fileName": "core/collect.ts",
                  "line": 155,
                  "character": 21
                }
              ]
            }
          }
        },
        "index": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "comment": {
            "shortText": "Index of points by id."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 160,
              "character": 20
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {
                "isExported": true
              },
              "indexSignature": {
                "name": "__index",
                "kindString": "Index signature",
                "flags": {},
                "parameters": [
                  {
                    "name": "pointId",
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ],
                "type": {
                  "type": "reference",
                  "name": "IPointGraphIndexElement"
                }
              },
              "sources": [
                {
                  "fileName": "core/collect.ts",
                  "line": 160,
                  "character": 21
                }
              ]
            }
          }
        },
        "insertedCount": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "comment": {
            "shortText": "Number of points inserted"
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 150,
              "character": 28
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        },
        "merged": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "comment": {
            "shortText": "Map of point ids which once existed but have been merged into another id due to close proximity."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 165,
              "character": 21
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "name": "__type",
              "kindString": "Type literal",
              "flags": {
                "isExported": true
              },
              "indexSignature": {
                "name": "__index",
                "kindString": "Index signature",
                "flags": {},
                "parameters": [
                  {
                    "name": "pointId",
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              },
              "sources": [
                {
                  "fileName": "core/collect.ts",
                  "line": 165,
                  "character": 22
                }
              ]
            }
          }
        },
        "values": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "comment": {
            "shortText": "List of values inserted at points."
          },
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 170,
              "character": 21
            }
          ],
          "type": {
            "type": "array",
            "elementType": {
              "type": "typeParameter",
              "name": "T"
            }
          }
        }
      },
      "Method": {
        "forEachPoint": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "forEachPoint",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Iterate over points in the index."
              },
              "parameters": [
                {
                  "name": "cb",
                  "flags": {},
                  "comment": "Callback for each point in the index.\n"
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 311,
              "character": 27
            }
          ]
        },
        "getElementAtPoint": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "getElementAtPoint",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Get the index element of a point, after merging."
              },
              "parameters": [
                {
                  "name": "p",
                  "flags": {},
                  "comment": "Point to look up index element.\n",
                  "type": "IPoint"
                }
              ],
              "type": "IPointGraphIndexElement"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 344,
              "character": 32
            }
          ]
        },
        "getIdOfPoint": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "getIdOfPoint",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Gets the id of a point, after merging."
              },
              "parameters": [
                {
                  "name": "p",
                  "flags": {},
                  "comment": "Point to look up id.\n",
                  "type": "IPoint"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 326,
              "character": 27
            }
          ]
        },
        "insertValue": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "insertValue",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Insert a value.",
                "returns": "valueId of the inserted value.\n"
              },
              "parameters": [
                {
                  "name": "value",
                  "flags": {},
                  "comment": "Value associated with this point.",
                  "type": "T"
                }
              ],
              "type": "number"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 197,
              "character": 26
            }
          ]
        },
        "insertValueIdAtPoint": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "insertValueIdAtPoint",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Insert a value at a point."
              },
              "parameters": [
                {
                  "name": "valueId",
                  "flags": {},
                  "type": "number"
                },
                {
                  "name": "p",
                  "flags": {},
                  "comment": "Point.",
                  "type": "IPoint"
                }
              ]
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 207,
              "character": 35
            }
          ]
        },
        "mergeNearestSinglePoints": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "mergeNearestSinglePoints",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Finds all points which have only one value associated. Then, merge to the nearest other point within this set.\nCall this after inserting values."
              },
              "parameters": [
                {
                  "name": "withinDistance",
                  "flags": {},
                  "comment": "Distance to consider points equal.\n",
                  "type": "number"
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 266,
              "character": 39
            }
          ]
        },
        "mergePoints": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "mergePoints",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Merge points within a given distance from each other. Call this after inserting values."
              },
              "parameters": [
                {
                  "name": "withinDistance",
                  "flags": {},
                  "comment": "Distance to consider points equal.\n",
                  "type": "number"
                }
              ],
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 239,
              "character": 26
            }
          ]
        },
        "reset": {
          "flags": {
            "isExported": true,
            "isPublic": true
          },
          "signatures": [
            {
              "name": "reset",
              "kindString": "Call signature",
              "comment": {
                "shortText": "Reset the stored points, graphs, lists, to initial state."
              },
              "type": "void"
            }
          ],
          "sources": [
            {
              "fileName": "core/collect.ts",
              "line": 184,
              "character": 20
            }
          ]
        }
      }
    }
  },
  "Variable": {
    "environment": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Current execution environment type, should be one of environmentTypes."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 63,
          "character": 26
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "string"
      },
      "defaultValue": " detectEnvironment()"
    },
    "version": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Version info"
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 15,
          "character": 22
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "string"
      },
      "defaultValue": "\"debug\""
    }
  },
  "Function": {
    "$": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "$",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Create a container to cascade a series of functions upon a model. This allows JQuery-style method chaining, e.g.:\n```\nmakerjs.$(shape).center().rotate(45).$result\n```\nThe output of each function call becomes the first parameter input to the next function call.\nThe returned value of the last function call is available via the `.$result` property.",
            "returns": "A new cascade container with ICascadeModel methods.\n"
          },
          "parameters": [
            {
              "name": "modelContext",
              "flags": {},
              "comment": "The initial model to execute functions upon.",
              "type": "IModel"
            }
          ],
          "type": "ICascadeModel"
        },
        {
          "name": "$",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Create a container to cascade a series of functions upon a path. This allows JQuery-style method chaining, e.g.:\n```\nmakerjs.$(path).center().rotate(90).$result\n```\nThe output of each function call becomes the first parameter input to the next function call.\nThe returned value of the last function call is available via the `.$result` property.",
            "returns": "A new cascade container with ICascadePath methods.\n"
          },
          "parameters": [
            {
              "name": "pathContext",
              "flags": {},
              "comment": "The initial path to execute functions upon.",
              "type": "IModel"
            }
          ],
          "type": "ICascadePath"
        },
        {
          "name": "$",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Create a container to cascade a series of functions upon a point. This allows JQuery-style method chaining, e.g.:\n```\nmakerjs.$([1,0]).scale(5).rotate(60).$result\n```\nThe output of each function call becomes the first parameter input to the next function call.\nThe returned value of the last function call is available via the `.$result` property.",
            "returns": "A new cascade container with ICascadePoint methods.\n"
          },
          "parameters": [
            {
              "name": "pointContext",
              "flags": {},
              "comment": "The initial point to execute functions upon.",
              "type": "IPoint"
            }
          ],
          "type": "ICascadePoint"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 971,
          "character": 21
        },
        {
          "fileName": "core/maker.ts",
          "line": 984,
          "character": 21
        },
        {
          "fileName": "core/maker.ts",
          "line": 997,
          "character": 21
        },
        {
          "fileName": "core/maker.ts",
          "line": 999,
          "character": 21
        }
      ]
    },
    "cloneObject": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "cloneObject",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Clone an object.",
            "returns": "A new clone of the original object.\n"
          },
          "typeParameter": [
            {
              "name": "T",
              "kindString": "Type parameter",
              "flags": {}
            }
          ],
          "parameters": [
            {
              "name": "objectToClone",
              "flags": {},
              "comment": "The object to clone.",
              "type": "T"
            }
          ],
          "type": "T"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 229,
          "character": 31
        }
      ]
    },
    "createRouteKey": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "createRouteKey",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Create a string representation of a route array.",
            "returns": "String of the flattened array.\n"
          },
          "parameters": [
            {
              "name": "route",
              "flags": {},
              "comment": "Array of strings which are segments of a route."
            }
          ],
          "type": "string"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 164,
          "character": 34
        }
      ]
    },
    "extendObject": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "extendObject",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Copy the properties from one object to another object.",
            "text": "Example:\n```\nmakerjs.extendObject({ abc: 123 }, { xyz: 789 }); //returns { abc: 123, xyz: 789 }\n```\n",
            "returns": "The original object after merging.\n"
          },
          "parameters": [
            {
              "name": "target",
              "flags": {},
              "comment": "The object to extend. It will receive the new properties.",
              "type": "Object"
            },
            {
              "name": "other",
              "flags": {},
              "comment": "An object containing properties to merge in.",
              "type": "Object"
            }
          ],
          "type": "Object"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 245,
          "character": 32
        }
      ]
    },
    "isChain": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isChain",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if an object implements the required properties of a chain."
          },
          "parameters": [
            {
              "name": "item",
              "flags": {},
              "comment": "The item to test.\n",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 736,
          "character": 27
        }
      ]
    },
    "isFunction": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isFunction",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if a variable is a function.",
            "returns": "True if the object is a function type.\n"
          },
          "parameters": [
            {
              "name": "value",
              "flags": {},
              "comment": "The object to test.",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 262,
          "character": 30
        }
      ]
    },
    "isModel": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isModel",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if an object implements the required properties of a model."
          },
          "parameters": [
            {
              "name": "item",
              "flags": {},
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 629,
          "character": 27
        }
      ]
    },
    "isNumber": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isNumber",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if a variable is a number.",
            "returns": "True if the object is a number type.\n"
          },
          "parameters": [
            {
              "name": "value",
              "flags": {},
              "comment": "The object to test.",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 272,
          "character": 28
        }
      ]
    },
    "isObject": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isObject",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if a variable is an object.",
            "returns": "True if the object is an object type.\n"
          },
          "parameters": [
            {
              "name": "value",
              "flags": {},
              "comment": "The object to test.",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 282,
          "character": 28
        }
      ]
    },
    "isPath": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isPath",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if an object implements the required properties of a path."
          },
          "parameters": [
            {
              "name": "item",
              "flags": {},
              "comment": "The item to test.\n",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 385,
          "character": 26
        }
      ]
    },
    "isPathArc": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isPathArc",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if an object implements the required properties of an arc."
          },
          "parameters": [
            {
              "name": "item",
              "flags": {},
              "comment": "The item to test.\n",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 412,
          "character": 29
        }
      ]
    },
    "isPathArcInBezierCurve": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isPathArcInBezierCurve",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if an object implements the required properties of an arc in a bezier curve."
          },
          "parameters": [
            {
              "name": "item",
              "flags": {},
              "comment": "The item to test.\n",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 421,
          "character": 42
        }
      ]
    },
    "isPathCircle": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isPathCircle",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if an object implements the required properties of a circle."
          },
          "parameters": [
            {
              "name": "item",
              "flags": {},
              "comment": "The item to test.\n",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 403,
          "character": 32
        }
      ]
    },
    "isPathLine": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isPathLine",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if an object implements the required properties of a line."
          },
          "parameters": [
            {
              "name": "item",
              "flags": {},
              "comment": "The item to test.\n",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 394,
          "character": 30
        }
      ]
    },
    "isPoint": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "isPoint",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Test to see if an object implements the required properties of a point."
          },
          "parameters": [
            {
              "name": "item",
              "flags": {},
              "comment": "The item to test.\n",
              "type": "any"
            }
          ],
          "type": "boolean"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 293,
          "character": 27
        }
      ]
    },
    "round": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "round",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Numeric rounding",
            "text": "Example: round to 3 decimal places\n```\nmakerjs.round(3.14159, .001); //returns 3.142\n```\n",
            "returns": "Rounded number.\n"
          },
          "parameters": [
            {
              "name": "n",
              "flags": {},
              "comment": "The number to round off.",
              "type": "number"
            },
            {
              "name": "accuracy",
              "flags": {},
              "comment": "Optional exemplar of number of decimal places.",
              "type": "number",
              "defaultValue": "1e-7"
            }
          ],
          "type": "number"
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 127,
          "character": 25
        }
      ]
    },
    "splitDecimal": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "splitDecimal",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Split a decimal into its whole and fractional parts as strings.",
            "text": "Example: get whole and fractional parts of 42.056\n```\nmakerjs.splitDecimal(42.056); //returns [\"42\", \"056\"]\n```\n",
            "returns": "Array of 2 strings when n contains a decimal point, or an array of one string when n is an integer.\n"
          },
          "parameters": [
            {
              "name": "n",
              "flags": {},
              "comment": "The number to split.",
              "type": "number"
            }
          ]
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 106,
          "character": 32
        }
      ]
    },
    "travel": {
      "flags": {
        "isExported": true
      },
      "signatures": [
        {
          "name": "travel",
          "kindString": "Call signature",
          "comment": {
            "shortText": "Travel along a route inside of a model to extract a specific node in its tree.",
            "returns": "Model or Path object within the modelContext tree.\n"
          },
          "parameters": [
            {
              "name": "modelContext",
              "flags": {},
              "comment": "Model to travel within.",
              "type": "IModel"
            },
            {
              "name": "route",
              "flags": {},
              "comment": "String of a flattened route, or a string array of route segments."
            }
          ]
        }
      ],
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 186,
          "character": 26
        }
      ]
    }
  },
  "Object literal": {
    "environmentTypes": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "Enumeration of environment types."
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 20,
          "character": 31
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "object"
      },
      "Variable": {
        "BrowserUI": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 21,
              "character": 17
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"browser\""
        },
        "NodeJs": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 22,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"node\""
        },
        "Unknown": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 24,
              "character": 15
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"unknown\""
        },
        "WebWorker": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 23,
              "character": 17
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"worker\""
        }
      }
    },
    "pathType": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "String-based enumeration of all paths types.",
        "text": "Examples: use pathType instead of string literal when creating a circle.\n```\nvar circle: IPathCircle = { type: pathType.Circle, origin: [0, 0], radius: 7 };   //typescript\nvar circle = { type: pathType.Circle, origin: [0, 0], radius: 7 };   //javascript\n```\n"
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 434,
          "character": 23
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "object"
      },
      "Variable": {
        "Arc": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 437,
              "character": 11
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"arc\""
        },
        "BezierSeed": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 438,
              "character": 18
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"bezier-seed\""
        },
        "Circle": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 436,
              "character": 14
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"circle\""
        },
        "Line": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 435,
              "character": 12
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"line\""
        }
      }
    },
    "unitType": {
      "flags": {
        "isExported": true
      },
      "comment": {
        "shortText": "String-based enumeration of unit types: imperial, metric or otherwise.\nA model may specify the unit system it is using, if any. When importing a model, it may have different units.\nUnit conversion function is makerjs.units.conversionScale().\nImportant: If you add to this, you must also add a corresponding conversion ratio in the unit.ts file!"
      },
      "sources": [
        {
          "fileName": "core/maker.ts",
          "line": 73,
          "character": 23
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "object"
      },
      "Variable": {
        "Centimeter": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 74,
              "character": 18
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"cm\""
        },
        "Foot": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 75,
              "character": 12
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"foot\""
        },
        "Inch": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 76,
              "character": 12
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"inch\""
        },
        "Meter": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 77,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"m\""
        },
        "Millimeter": {
          "flags": {
            "isExported": true
          },
          "sources": [
            {
              "fileName": "core/maker.ts",
              "line": 78,
              "character": 18
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "defaultValue": "\"mm\""
        }
      }
    }
  }
}